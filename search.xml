<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+Next v8.2.0的搭建与优化</title>
    <url>/2024/08/09/Hexo-Next%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很早就想弄一个博客,在大一的暑假终于开始着手搭建,在经过一番研究和比较，我最终决定采用 Hexo 系统来构建我的个人博客。主题选择了比较简洁的Next。<span id="more"></span><br>本次搭建环境：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主题Next：8.20.0</span><br><span class="line">npm：10.7.0</span><br><span class="line"></span><br><span class="line">hexo version</span><br><span class="line">hexo-cli: 4.3.2</span><br><span class="line">os: darwin 23.5.0 14.5</span><br><span class="line">node: 20.15.1</span><br><span class="line">acorn: 8.11.3</span><br><span class="line">ada: 2.7.8</span><br><span class="line">ares: 1.32.1</span><br><span class="line">base64: 0.5.2</span><br><span class="line">brotli: 1.1.0</span><br><span class="line">cjs_module_lexer: 1.2.2</span><br><span class="line">cldr: 44.1</span><br><span class="line">icu: 74.2</span><br><span class="line">llhttp: 8.1.2</span><br><span class="line">modules: 115</span><br><span class="line">napi: 9</span><br><span class="line">nghttp2: 1.61.0</span><br><span class="line">openssl: 3.3.1</span><br><span class="line">simdutf: 5.2.8</span><br><span class="line">tz: 2023c</span><br><span class="line">undici: 6.13.0</span><br><span class="line">unicode: 15.1</span><br><span class="line">uv: 1.48.0</span><br><span class="line">uvwasi: 0.0.21</span><br><span class="line">v8: 11.3.244.8-node.23</span><br><span class="line">zlib: 1.2.12</span><br></pre></td></tr></table></figure>

<h1 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h1><ol>
<li>去<a href="https://nodejs.org/zh-cn">官网</a>下载安装包（建议使用LTS版本）</li>
<li>Mac用户推荐使用brew安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install node@20    <span class="comment">##安装v20.16.0(LTS)</span></span><br><span class="line">brew install node       <span class="comment">##安装最新版</span></span><br></pre></td></tr></table></figure>

<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g        <span class="comment">##全局安装Hexo</span></span><br><span class="line">hexo init blog                 <span class="comment">##初始化一个新的博客项目(默认在/user目录下)</span></span><br></pre></td></tr></table></figure>
<p>简单解释各文件夹的作用<br>node_modules：依赖包<br>scaffolds：命令生成文章等的模板<br>source：自己写的博文以及各种默认页面都存放在这个文件夹下<br>themes：存放 Hexo 的主题<br>_config.yml：站点配置，~&#x2F;blog文件夹里面的“_config.yml”是 <strong>站点</strong> 配置文件， ~&#x2F;blog&#x2F;theme&#x2F;next里的是 <strong>主题</strong> 配置文件<br>package.json：项目所需模块项目的配置信息，后续安装插件如果使用“– save”则会将包的名称和版本信息添加到此文件里，卸载时也要注意加上“–save”</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install                    <span class="comment">##安装项目所需的依赖包</span></span><br><span class="line">hexo server                    <span class="comment">##本地启动服务</span></span><br></pre></td></tr></table></figure>
<p>访问 <a href="http://localhost:4000/">http://localhost:4000</a> ，此时您将看到 Hexo 的默认界面。接下来，我们就要开始为它挑选美观的主题和实用的插件，进行一番精心的“装修”了。</p>
<h1 id="安装Next主题"><a href="#安装Next主题" class="headerlink" title="安装Next主题"></a>安装Next主题</h1><p>注意：NexT的仓库地址经过了几次变化，请见<a href="https://theme-next.js.org/docs/getting-started/upgrade.html#NexT-Repositories">NexT Repositories</a></p>
<table>
<thead>
<tr>
<th align="center">Years</th>
<th align="center">Version</th>
<th align="center">Repository</th>
</tr>
</thead>
<tbody><tr>
<td align="center">2014 ~ 2017</td>
<td align="center">v5</td>
<td align="center"><a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a></td>
</tr>
<tr>
<td align="center">2018 ~ 2019</td>
<td align="center">v6 ~v7</td>
<td align="center"><a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></td>
</tr>
<tr>
<td align="center">2020</td>
<td align="center">v8</td>
<td align="center"><a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a></td>
</tr>
</tbody></table>
<p>我一开始没弄清楚，用v7.8.0都弄得差不多了，才发现用的是老版本😭</p>
<p>在blog目录执行</p>
<p><code>npm install hexo-theme-next</code></p>
<p>打开站点配置文件，<br>找到 “theme” 将 “landscape” 改为 “next” </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>


<h1 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h1><p>关于站点配置文件的说明可以查看以下文章</p>
<ol>
<li><a href="https://hexo.io/zh-cn/docs/configuration">官方文档</a></li>
<li><a href="https://www.lvxuefei.top/Hexo%E7%AB%99%E7%82%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/">槐雪博客</a>(推荐)</li>
<li><a href="https://io-oi.me/tech/hexo-next-optimization/#%E7%AB%99%E7%82%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">reuixiy博客</a></li>
</ol>
<p><strong>注意：</strong>修改了站点配置后，需要先停止本地服务，再使用以下命令来重启服务，才能看到修改后的结果，而修改了主题配置可以按command+shift+R (macOS) 或 ctrl+F5 (Windows&#x2F;Linux) 来强制刷新网页，也能立即看到修改后的效果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo server</span><br></pre></td></tr></table></figure>


<h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><h2 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h2><p>Next 主题自带四种样式，官方提供了预览<br><a href="https://theme-next.js.org/muse/">💟Muse</a>      <a href="https://theme-next.js.org/mist/">🔯Mist</a>      <a href="https://theme-next.js.org/pisces/">♓️Pisces</a>      <a href="https://theme-next.js.org/">♊️Gemini</a></p>
<p>挑选好自己喜欢的主题后打开站点配置文件，不要注释自己所选的样式，比如我选择“Mist”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure>

<h2 id="修改网站图标"><a href="#修改网站图标" class="headerlink" title="修改网站图标"></a>修改网站图标</h2><p>将自己的图片放到 themes&#x2F;next&#x2F;source&#x2F;images 文件夹下面然后修改文件名就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16-next.png</span><br><span class="line">  medium: /images/favicon-32x32-next.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br><span class="line">  #android_manifest: /manifest.json</span><br></pre></td></tr></table></figure>

<h2 id="菜单设置"><a href="#菜单设置" class="headerlink" title="菜单设置"></a>菜单设置</h2><p>将你需要的界面取消注释， ||  后面的是font awesome图标，在<a href="https://fontawesome.com/icons">这里</a>可以找到你需要的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home                    #首页</span><br><span class="line">  about: /about/ || fa fa-user             #关于</span><br><span class="line">  tags: /tags/ || fa fa-tags               #标签</span><br><span class="line">  categories: /categories/ || fa fa-th     #分类</span><br><span class="line">  archives: /archives/ || fa fa-archive    #归档</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar  #日程表</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap  #站点地图</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat    #404页面</span><br></pre></td></tr></table></figure>

<p>选择需要的菜单后，需要在&#x2F;blog目录下执行以下命令（以about界面为例）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>
<p>然后就可以在&#x2F;blog&#x2F;ource&#x2F;about&#x2F;index.md 里面编辑内容了</p>
<h2 id="修改底部网站建立时间"><a href="#修改底部网站建立时间" class="headerlink" title="修改底部网站建立时间"></a>修改底部网站建立时间</h2><p>把since后面改成建立网站的年份</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the year when the site was setup. If not defined, current year will be used.</span><br><span class="line">  since: 2024</span><br></pre></td></tr></table></figure>

<h2 id="自定义网站底部的♥️"><a href="#自定义网站底部的♥️" class="headerlink" title="自定义网站底部的♥️"></a>自定义网站底部的♥️</h2><p>找到以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Icon between year and copyright info.</span><br><span class="line">icon:</span><br><span class="line">  # Icon name in Font Awesome. See: https://fontawesome.com/icons</span><br><span class="line">  name: fa fa-heart      ##fontawesome图标可自定义</span><br><span class="line">  # If you want to animate the icon, set it to true.</span><br><span class="line">  animated: true         ##是否开启动态图标</span><br><span class="line">  # Change the color of icon, using Hex Code.</span><br><span class="line">  color: &quot;#ff0000&quot;       ##颜色</span><br></pre></td></tr></table></figure>

<h2 id="隐藏底部-powered-By-Hexo-强力驱动"><a href="#隐藏底部-powered-By-Hexo-强力驱动" class="headerlink" title="隐藏底部 powered By Hexo &#x2F; 强力驱动"></a>隐藏底部 powered By Hexo &#x2F; 强力驱动</h2><p>将powered改为false</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Powered by Hexo &amp; NexT</span><br><span class="line">powered: false</span><br></pre></td></tr></table></figure>

<p>或者打开themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.njk</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme.footer.powered %&#125;</span><br><span class="line">  &lt;div class=&quot;powered-by&quot;&gt;</span><br><span class="line">    &#123;%- set next_site = &#x27;https://theme-next.js.org&#x27; if theme.scheme === &#x27;Gemini&#x27; else &#x27;https://theme-next.js.org/&#x27; + theme.scheme | lower + &#x27;/&#x27; %&#125;</span><br><span class="line">    &#123;&#123;- __(&#x27;footer.powered&#x27;, next_url(&#x27;https://hexo.io&#x27;, &#x27;Hexo&#x27;) + &#x27; &amp; &#x27; + next_url(next_site, &#x27;NexT.&#x27; + theme.scheme)) &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>

<p>把这段代码首尾分别加上：<!-- 和-->，或者直接删除。也可修改其中的内容满足自己的需求<br>删除的方法来自<a href="https://blog.csdn.net/as480133937/article/details/100138838#t9">这里</a></p>
<h2 id="侧栏设置"><a href="#侧栏设置" class="headerlink" title="侧栏设置"></a>侧栏设置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  # Sidebar position. Available values: left | right  #侧栏的位置</span><br><span class="line">  position: left</span><br><span class="line"></span><br><span class="line">  # Sidebar width.                    #侧栏的宽度，注意修改对应的主题</span><br><span class="line">  # Applicable to Muse | Mist and mobile of Pisces | Gemini.</span><br><span class="line">  width_expanded: 320</span><br><span class="line">  # Applicable to desktop of Pisces | Gemini.</span><br><span class="line">  width_dual_column: 240</span><br><span class="line"></span><br><span class="line">  # Sidebar display.    #侧栏显示何时展示（只对Muse | Mist两种风格有效）</span><br><span class="line">  # Applicable to Muse | Mist and mobile of Pisces | Gemini.</span><br><span class="line">  # Available values:</span><br><span class="line">  #  - post     在文章页面（拥有目录列表）时显示,默认方式</span><br><span class="line">  #  - always   在所有页面中都显示</span><br><span class="line">  #  - hide     在所有页面中都隐藏（可以手动展开）</span><br><span class="line">  #  - remove   完全移除侧边栏，包括侧边栏切换按钮。</span><br><span class="line">  display: post</span><br><span class="line"></span><br><span class="line">  # Sidebar padding in pixels.  #边栏填充像素</span><br><span class="line">  padding: 18</span><br><span class="line">  # Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span><br><span class="line">  # 侧边栏与顶部菜单栏的偏移量，单位为像素（仅适用于 Pisces | Gemini）。</span><br><span class="line">  offset: 12</span><br></pre></td></tr></table></figure>
<h2 id="边栏头像"><a href="#边栏头像" class="headerlink" title="边栏头像"></a>边栏头像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line">  url: #/images/avatar.gif    #如要启用，请取消注释并且填入头像的路径</span><br><span class="line">  # If true, the avatar will be displayed in circle.</span><br><span class="line">  rounded: false              #是否开启圆角</span><br><span class="line">  # If true, the avatar will be rotated with the cursor.</span><br><span class="line">  rotated: false              #光标移到头像上后头像是否旋转</span><br></pre></td></tr></table></figure>

<h2 id="添加联系方式"><a href="#添加联系方式" class="headerlink" title="添加联系方式"></a>添加联系方式</h2><p>找到下面的代码，把自己需要添加的联系方式给取消注释，改成自己的链接，图标也可以自定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Social Links</span><br><span class="line"># Usage: `Key: permalink || icon`</span><br><span class="line"># Key is the link label showing to end users.</span><br><span class="line"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span><br><span class="line">social:</span><br><span class="line">  #GitHub: https://github.com/yourname || fab fa-github</span><br><span class="line">  #E-Mail: mailto:yourname@gmail.com || fa fa-envelope</span><br><span class="line">  #Weibo: https://weibo.com/yourname || fab fa-weibo</span><br><span class="line">  #Twitter: https://twitter.com/yourname || fab fa-twitter</span><br><span class="line">  #FB Page: https://www.facebook.com/yourname || fab fa-facebook</span><br><span class="line">  #StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || fab fa-youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || fab fa-instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || fab fa-skype</span><br><span class="line">  </span><br><span class="line">social_icons:       #图标设置</span><br><span class="line">  enable: true</span><br><span class="line">  icons_only: false</span><br><span class="line">  transition: false</span><br></pre></td></tr></table></figure>

<h1 id="网页优化以及插件安装"><a href="#网页优化以及插件安装" class="headerlink" title="网页优化以及插件安装"></a>网页优化以及插件安装</h1><h2 id="文章添加阴影"><a href="#文章添加阴影" class="headerlink" title="文章添加阴影"></a>文章添加阴影</h2><p>打开&#x2F;blog&#x2F;themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_common&#x2F;components&#x2F;post&#x2F;index.styl (Next v8.2.0)将</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.use-motion &#123;</span><br><span class="line">  if (hexo-config(&#x27;motion.transition.post_block&#x27;)) &#123;</span><br><span class="line">    .post-block, .pagination, .comments &#123;</span><br><span class="line">      visibility: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>修改为（注释可不加）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.use-motion &#123;</span><br><span class="line">  if (hexo-config(&#x27;motion.transition.post_block&#x27;)) &#123;</span><br><span class="line">    .post-block&#123;</span><br><span class="line">     visibility: hidden;</span><br><span class="line">     margin-top: 60px;</span><br><span class="line">     margin-bottom: 0px;</span><br><span class="line">     border-radius: 20px;      ##边框圆角</span><br><span class="line">     padding: 25px;            ##边距</span><br><span class="line">     -webkit-box-shadow: 0 0 3px rgba(128, 128, 128, .65);</span><br><span class="line">     -moz-box-shadow: 0 0 3px rgba(128, 128, 128, .65);</span><br><span class="line">	&#125;  .pagination, .comments &#123;</span><br><span class="line">      visibility: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>方法来自<a href="https://hst15701102464.github.io/2022/02/17/next%E4%B8%BA%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E8%BE%B9%E6%A1%86%E9%98%B4%E5%BD%B1-%E7%BB%9D%E5%AF%B9%E6%9C%89%E6%95%88/">呼松涛的博客</a></p>
<p>此时你会发现首页的第一篇文章的边框上边距很大，但是第二篇是正常的，这时候使用浏览器开发者工具会发现，该边框的padding-top还是有80px，我也找不到这个代码在哪，所以曲线救国了</p>
<img src="https://tcer.rr.nu/i/2024/08/11/66b8605fde90a.webp"/>

<p>打开&#x2F;blog&#x2F;themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_schemes&#x2F;Mist&#x2F;_posts-expand.styl 添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.post-block:first-of-type &#123;</span><br><span class="line">  padding-top: 25px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时你打开网页，就会发现边距合适了，但是用开发者工具查看，可以发现并没有把80px的代码去掉，只不过我们设置的优先级更高而已</p>
<img src="https://tcer.rr.nu/i/2024/08/11/66b8607abf97d.webp" />

<h2 id="调整首页文章边距"><a href="#调整首页文章边距" class="headerlink" title="调整首页文章边距"></a>调整首页文章边距</h2><p>和上面是同一个文件，打开&#x2F;blog&#x2F;themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_schemes&#x2F;Mist&#x2F;_posts-expand.styl<br>将120px，修改成合适的大小，我改为25px</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.post-block:not(:first-of-type) &#123;</span><br><span class="line">  margin-top: 120px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法来自<a href="https://hst15701102464.github.io/2022/02/17/Hexo-Next%E8%B0%83%E6%95%B4%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E9%97%B4%E8%B7%9D/">呼松涛的博客</a></p>
<h2 id="文章摘要设置"><a href="#文章摘要设置" class="headerlink" title="文章摘要设置"></a>文章摘要设置</h2><ol>
<li>手动添加<code>&lt;!-- more --&gt;</code>（推荐）</li>
<li>手动在文章前面添加 description 同时在主题配置里面<code>excerpt_description: true</code></li>
</ol>
<p>此方法见<a href="https://theme-next.js.org/docs/theme-settings/posts#Preamble-Text">官方文档</a></p>
<h2 id="文章字数统计，预估阅读时长"><a href="#文章字数统计，预估阅读时长" class="headerlink" title="文章字数统计，预估阅读时长"></a>文章字数统计，预估阅读时长</h2><p>这样的插件有几个“hexo-symbols-count-time”的<a href="https://github.com/theme-next/hexo-symbols-count-time?tab=readme-ov-file#hexo-symbols-count-time">README</a>里面写比起他家的更好，懒得折腾就直接用这个了</p>
<p>首先安装插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time</span><br></pre></td></tr></table></figure>

<p>然后在站点配置里面添加（下面是我的配置，自已想研究去看官方<a href="https://github.com/theme-next/hexo-symbols-count-time?tab=readme-ov-file#hexo-symbols-count-time">README</a>吧）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: false</span><br><span class="line">  awl: 3</span><br><span class="line">  wpm: 260</span><br><span class="line">  suffix: &quot;mins.&quot;</span><br></pre></td></tr></table></figure>

<p>再在主题配置里面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/next-theme/hexo-word-counter</span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true      # 是否另起一行（true的话不和发表时间等同一行）</span><br><span class="line">  item_text_total: true    # 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长）</span><br><span class="line">  item_text_post: true      # 首页文章统计数量前是否显示文字描述（本文字数、阅读时长）</span><br></pre></td></tr></table></figure>

<h2 id="阅读进度"><a href="#阅读进度" class="headerlink" title="阅读进度"></a>阅读进度</h2><p>我是设置成在网站的顶部有一个小蓝条</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reading_progress:</span><br><span class="line">  enable: true</span><br><span class="line">  # Available values: left | right</span><br><span class="line">  start_at: left</span><br><span class="line">  # Available values: top | bottom</span><br><span class="line">  position: top</span><br><span class="line">  reversed: false</span><br><span class="line">  color: &quot;#2ab1ff&quot;</span><br><span class="line">  height: 2px</span><br></pre></td></tr></table></figure>
<p>back2top 也有这样的功能</p>
<h2 id="网页加载进度条"><a href="#网页加载进度条" class="headerlink" title="网页加载进度条"></a>网页加载进度条</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pace:</span><br><span class="line">  enable: true</span><br><span class="line">  # All available colors:</span><br><span class="line">  # black | blue | green | orange | pink | purple | red | silver | white | yellow</span><br><span class="line">  color: blue</span><br><span class="line">  # All available themes:</span><br><span class="line">  # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span><br><span class="line">  # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span><br><span class="line">  theme: minimal</span><br></pre></td></tr></table></figure>


<h2 id="返回顶部"><a href="#返回顶部" class="headerlink" title="返回顶部"></a>返回顶部</h2><p>添加返回顶部的小按钮</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line">  # Back to top in sidebar.</span><br><span class="line">  sidebar: false</span><br><span class="line">  # Scroll percent label in b2t button. </span><br><span class="line">  scrollpercent: false</span><br></pre></td></tr></table></figure>

<p>这个按纽竟然不是圆角，这肯定得改<br>修改back2top<br>打开&#x2F;blog&#x2F;themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_common&#x2F;components&#x2F;back-to-top.styl</p>
<p>顶部找到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (hexo-config(&#x27;back2top.enable&#x27;)) &#123;</span><br><span class="line">  .back-to-top &#123;</span><br><span class="line">    font-size: $b2t-font-size;</span><br></pre></td></tr></table></figure>

<p>加上<code>border-radius: 7px;</code> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (hexo-config(&#x27;back2top.enable&#x27;)) &#123;</span><br><span class="line">  .back-to-top &#123;</span><br><span class="line">    font-size: $b2t-font-size;</span><br><span class="line">    border-radius: 7px;</span><br></pre></td></tr></table></figure>

<h2 id="边栏按钮修改圆角"><a href="#边栏按钮修改圆角" class="headerlink" title="边栏按钮修改圆角"></a>边栏按钮修改圆角</h2><p>back2top都是圆角了，边栏按钮也得改<br>打开&#x2F;blog&#x2F;themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_common&#x2F;outline&#x2F;sidebar&#x2F;sidebar-toggle.styl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.sidebar-toggle &#123;</span><br><span class="line">  bottom: $b2t-position-bottom-on + $sidebar-toggle-size + 5px;</span><br></pre></td></tr></table></figure>

<p>底部加上<code> border-radius: 7px;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.sidebar-toggle &#123;</span><br><span class="line">  bottom: $b2t-position-bottom-on + $sidebar-toggle-size + 5px;</span><br><span class="line">  border-radius: 7px;</span><br><span class="line">  height: $sidebar-toggle-inner-size;</span><br></pre></td></tr></table></figure>

<h2 id="网页夜间模式切换按钮"><a href="#网页夜间模式切换按钮" class="headerlink" title="网页夜间模式切换按钮"></a>网页夜间模式切换按钮</h2><p><a href="https://github.com/rqh656418510/hexo-next-darkmode/tree/main">GitHub地址</a></p>
<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-next-darkmode --save</span><br></pre></td></tr></table></figure>

<p>确保 NexT 主题原生的 darkmode 选项设置为 false：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Close NexT&#x27;s darkmode</span><br><span class="line">darkmode: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>往 NexT 主题的 _config.yml 配置文件里添加以下内容,下面的是我的配置，由于切换的按钮太丑了，自己又不会调，也不会把他弄到菜单栏，所以就用上了自动根据设备切换深色模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Darkmode JS</span><br><span class="line"># For more information: https://github.com/rqh656418510/hexo-next-darkmode, https://github.com/sandoche/Darkmode.js</span><br><span class="line">darkmode_js:</span><br><span class="line">  enable: false</span><br><span class="line">  bottom: &#x27;24px&#x27; # default: &#x27;32px&#x27;</span><br><span class="line">  right: &#x27;24px&#x27; # default: &#x27;32px&#x27;</span><br><span class="line">  left: &#x27;unset&#x27; # default: &#x27;unset&#x27;</span><br><span class="line">  time: &#x27;0.4s&#x27; # default: &#x27;0.3s&#x27;</span><br><span class="line">  mixColor: &#x27;transparent&#x27; # default: &#x27;#fff&#x27;</span><br><span class="line">  backgroundColor: &#x27;transparent&#x27; # default: &#x27;#fff&#x27;</span><br><span class="line">  buttonColorDark: &#x27;#2B2727&#x27; # default: &#x27;#100f2c&#x27;</span><br><span class="line">  buttonColorLight: &#x27;#F2EECF&#x27; # default: &#x27;#fff&#x27;</span><br><span class="line">  isActivated: false # default false</span><br><span class="line">  saveInCookies: true # default: true</span><br><span class="line">  label: &#x27;🌓&#x27; # default: &#x27;&#x27;</span><br><span class="line">  autoMatchOsTheme: true # default: true</span><br><span class="line">  libUrl: # Set custom library cdn url for Darkmode.js</span><br></pre></td></tr></table></figure>

<h2 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h2><p>1.手动加密，方法来自<a href="https://blog.csdn.net/as480133937/article/details/100138838#t35">这里</a>不是很安全，所以建议使用下面的插件<br>2.插件的<a href="https://github.com/D0n9X1n/hexo-blog-encrypt">官方地址</a>,插件还有很多功能是我没有用到的，推荐看官方文档配置</p>
<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure>

<p>只想简单使用直接在文章头添加以下信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">tags:</span><br><span class="line">- 作为日记加密</span><br><span class="line">date: 2016-03-30 21:12:21</span><br><span class="line">password: mikemessi</span><br><span class="line">abstract: 有东西被加密了, 请输入密码查看.</span><br><span class="line">message: 您好, 这里需要密码.</span><br><span class="line">wrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试.</span><br><span class="line">wrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>每一篇文章都这样配置太麻烦了，所以在 <strong>站点</strong> 配置添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  # Security</span><br><span class="line">encrypt: # hexo-blog-encrypt</span><br><span class="line">  silent: true</span><br><span class="line">  theme: wave           #官方文档有主题示例</span><br><span class="line">  abstract: 有东西被加密了，需要密码才能继续阅读。</span><br><span class="line">  message: 嘿，这里需要密码。</span><br><span class="line">  wrong_pass_message: 这个密码看着不太对，请再试试。</span><br><span class="line">  wrong_hash_message: 抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。</span><br></pre></td></tr></table></figure>

<p>官方的主题示例</p>
<p><a href="https://mhexo.github.io/2020/12/23/Theme-Test-Default/">default</a><br><a href="https://mhexo.github.io/2020/12/23/Theme-Test-Blink/">blink</a><br><a href="https://mhexo.github.io/2020/12/23/Theme-Test-Shrink/">shrink</a><br><a href="https://mhexo.github.io/2020/12/23/Theme-Test-Flip/">flip</a><br><a href="https://mhexo.github.io/2020/12/23/Theme-Test-Up/">up</a><br><a href="https://mhexo.github.io/2020/12/23/Theme-Test-Surge/">surge</a><br><a href="https://mhexo.github.io/2020/12/23/Theme-Test-Wave/">wave</a><br><a href="https://mhexo.github.io/2020/12/23/Theme-Test-Xray/">xray</a></p>
<p>使用该插件，加密文章解锁后文章的目录是不会显示的，这是一个毛病，有博主研究出了不是非常完美的方法，我在Next v7.80还可以使用，但是v8.2.0就不行了有兴趣的朋友自己去看看吧 <a href="https://www.itfanr.cc/2021/04/16/hexo-blog-article-encryption/">地址在这</a></p>
<h2 id="标签云"><a href="#标签云" class="headerlink" title="标签云"></a>标签云</h2><p>我没有使用这个插件，使用方法就见官方的吧</p>
<p>插件<a href="https://github.com/D0n9X1n/hexo-tag-cloud">GitHub地址</a><br>作者<a href="https://vic.kim/2019/05/23/Hexo%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B%E6%A0%87%E7%AD%BE%E4%BA%91%E5%8F%8A%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA/">博客地址</a></p>
<h2 id="更改选中颜色"><a href="#更改选中颜色" class="headerlink" title="更改选中颜色"></a>更改选中颜色</h2><p>网站处于深色模式时，选中的字体不明显，下面是优化方法<br>主题文件取消  <code>style: source/_data/styles.styl</code>注释<br>在&#x2F;blog&#x2F;source&#x2F;_data&#x2F;styles.styl创建对应文件<br>添加以下代码，颜色可自行修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">::selection &#123;</span><br><span class="line">  background: #348de0;</span><br><span class="line">  color: #ffffff;</span><br><span class="line">&#125;</span><br><span class="line">::-moz-selection &#123;</span><br><span class="line">  background: #348de0;</span><br><span class="line">  color: #ffffff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义404界面"><a href="#自定义404界面" class="headerlink" title="自定义404界面"></a>自定义404界面</h2><p>终端输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page 404</span><br></pre></td></tr></table></figure>

<p>将会在source目录下生成一个404文件夹，其中有一个index.md文件，这个文件其实就相当于是404.html了，自行修改里面内容吧，记得信息头加上<code>permalink: /404</code></p>
<h2 id="网站标题自动变化"><a href="#网站标题自动变化" class="headerlink" title="网站标题自动变化"></a>网站标题自动变化</h2><p>当窗口不再处于焦点时，更改为不同的标题</p>
<ol>
<li>通过插件实现,v8.2.0失效，<a href="https://github.com/theme-next/hexo-next-title">GitHub地址</a></li>
<li>手动修改，方法来自<a href="https://siriusq.top/Next-8-0-%E5%8D%87%E7%BA%A7%E6%97%A5%E5%BF%97.html?highlight=404#%E6%96%B0%E7%89%88%E5%B4%A9%E6%BA%83%E6%AC%BA%E9%AA%97">这里</a></li>
</ol>
<p>打开&#x2F;blog&#x2F;themes&#x2F;next&#x2F;source&#x2F;js，新建js文件,我以change.js为例，下面是我的配置的代码，<br>网站图标记得修改，我是在PS把图标的颜色去掉了，注意图标路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var OriginTitle = document.title;</span><br><span class="line">var titleTime;</span><br><span class="line">var crashedIcon;</span><br><span class="line"></span><br><span class="line">if (window.matchMedia(&#x27;(prefers-color-scheme: dark)&#x27;).matches) &#123;</span><br><span class="line">    crashedIcon = &quot;/images/remove.png&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    crashedIcon = &quot;/images/remove.png&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.addEventListener(&#x27;visibilitychange&#x27;, function () &#123;</span><br><span class="line">    if (document.hidden) &#123;</span><br><span class="line">        var icons = document.querySelectorAll(&quot;link[rel=&#x27;icon&#x27;]&quot;);</span><br><span class="line">        for (var i = 0; i &lt; icons.length; i++) &#123;</span><br><span class="line">            icons[i].href = crashedIcon;</span><br><span class="line">        &#125;</span><br><span class="line">        document.title = &#x27;(°A°`) 不要走!再看看嘛!&#x27;;</span><br><span class="line">        clearTimeout(titleTime);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        var icons = document.querySelectorAll(&quot;link[rel=&#x27;icon&#x27;]&quot;);</span><br><span class="line">        for (var i = 0; i &lt; icons.length; i++) &#123;</span><br><span class="line">            icons[i].href = &quot;/images/rainbow.ico&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        document.title = &#x27;◝(⁰▿⁰)◜ 欢迎回来!&#x27; + OriginTitle;</span><br><span class="line">        titleTime = setTimeout(function () &#123;</span><br><span class="line">            document.title = OriginTitle;</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>打开主题配置文件去掉 <code> bodyEnd: source/_data/body-end.njk</code>的注释<br>同时在对应路径创建这个文件 &#x2F;blog&#x2F;source&#x2F;_data&#x2F;body-end.njk ，添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--崩溃欺骗--&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/change.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="修改文章底部的-号的标签"><a href="#修改文章底部的-号的标签" class="headerlink" title="修改文章底部的#号的标签"></a>修改文章底部的#号的标签</h2><p>1.手动修改，方法来自<a href="https://blog.csdn.net/as480133937/article/details/100138838#t14">这里</a><br>修改文件&#x2F;blog&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;post.njk<br>找到<code> rel=“tag”&gt;#</code><br>将  #  换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if post.tags and post.tags.length %&#125;</span><br><span class="line">  &#123;%- set tag_indicate = &#x27;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;&#x27; if theme.tag_icon else &#x27;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;&#x27; %&#125;</span><br><span class="line">  &lt;div class=&quot;post-tags&quot;&gt;</span><br><span class="line">    &#123;%- for tag in post.tags.toArray() %&#125;</span><br><span class="line">      &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">    &#123;%- endfor %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>


<ol start="2">
<li>打开主题文件，<code>tag_icon: true</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Use icon instead of the symbol # to indicate the tag at the bottom of the post</span><br><span class="line">tag_icon: true</span><br></pre></td></tr></table></figure>

<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # All available themes: https://theme-next.js.org/highlight/</span><br><span class="line">  theme:</span><br><span class="line">    light: base16/synth-midnight-terminal-light</span><br><span class="line">    dark: atom-one-dark</span><br><span class="line">  prism:</span><br><span class="line">    light: prism</span><br><span class="line">    dark: prism-tomorrow</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style: mac</span><br><span class="line">  # Fold code block</span><br><span class="line">  fold:</span><br><span class="line">    enable: false</span><br><span class="line">    height: 500</span><br></pre></td></tr></table></figure>

<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>用了思源宋体</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  # Uri of fonts host, e.g. https://fonts.googleapis.com (Default).</span><br><span class="line">  host:</span><br><span class="line"></span><br><span class="line">  # Font options:</span><br><span class="line">  # `external: true` will load this font family from `host` above.</span><br><span class="line">  # `family: Times New Roman`. Without any quotes.</span><br><span class="line">  # `size: x.x`. Use `em` as unit. Default: 1 (16px)</span><br><span class="line"></span><br><span class="line">  # Global font settings used for all elements inside &lt;body&gt;.</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line">    family: Noto Serif SC</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for site title (.site-title).</span><br><span class="line">  title:</span><br><span class="line">    external: true</span><br><span class="line">    family: Fira Code</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span><br><span class="line">  headings:</span><br><span class="line">    external: true</span><br><span class="line">    family: </span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for posts (.post-body).</span><br><span class="line">  posts:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line"></span><br><span class="line">  # Font settings for &lt;code&gt; and code blocks.</span><br><span class="line">  codes:</span><br><span class="line">    external: true</span><br><span class="line">    family: Fira Code, Noto Serif SC</span><br></pre></td></tr></table></figure>

<h2 id="添加CC协议"><a href="#添加CC协议" class="headerlink" title="添加CC协议"></a>添加CC协议</h2><p>防君子不防小人</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Creative Commons 4.0 International License.</span><br><span class="line"># See: https://creativecommons.org/about/cclicenses/</span><br><span class="line">creative_commons:</span><br><span class="line">  # Available values: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | cc-zero</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  # Available values: big | small</span><br><span class="line">  size: small</span><br><span class="line">  sidebar: false</span><br><span class="line">  post: true</span><br><span class="line">  # You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span><br><span class="line">  # CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span><br><span class="line">  language: zh-CN</span><br></pre></td></tr></table></figure>

<h2 id="网站搜索"><a href="#网站搜索" class="headerlink" title="网站搜索"></a>网站搜索</h2><p><a href="https://github.com/next-theme/hexo-generator-searchdb">GitHub地址</a></p>
<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>

<p>站点配置添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br><span class="line">  format: html</span><br></pre></td></tr></table></figure>

<p>主题配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local Search</span><br><span class="line"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  trigger: auto				#若为manual, 通过按下enter键或者点击搜索按钮触发搜索</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br></pre></td></tr></table></figure>

<h2 id="不蒜子网站统计"><a href="#不蒜子网站统计" class="headerlink" title="不蒜子网站统计"></a>不蒜子网站统计</h2><p>本地预览时，访问量不正常，部署后才可用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: fa fa-user</span><br><span class="line">  total_views: true</span><br><span class="line">  total_views_icon: fa fa-eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: far fa-eye</span><br></pre></td></tr></table></figure>

<p>自定义文字，打开&#x2F;blog&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.njk<br>下面是我的配置，修改中文就可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme.busuanzi_count.enable %&#125;</span><br><span class="line">&lt;div class=&quot;busuanzi-count&quot;&gt;</span><br><span class="line">  &#123;%- if theme.busuanzi_count.total_visitors %&#125;</span><br><span class="line">    &lt;span class=&quot;post-meta-item&quot; id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;&#123;&#123; theme.busuanzi_count.total_visitors_icon &#125;&#125;&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;site-uv&quot; title=&quot;&#123;&#123; __(&#x27;footer.total_visitors&#x27;) &#125;&#125;&quot;&gt;</span><br><span class="line">        来过 &lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt; 人</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- if theme.busuanzi_count.total_views %&#125;</span><br><span class="line">    &lt;span class=&quot;post-meta-item&quot; id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;&#123;&#123; theme.busuanzi_count.total_views_icon &#125;&#125;&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;site-pv&quot; title=&quot;&#123;&#123; __(&#x27;footer.total_views&#x27;) &#125;&#125;&quot;&gt;</span><br><span class="line">        读了 &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt; 次</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加网站运行时间"><a href="#添加网站运行时间" class="headerlink" title="添加网站运行时间"></a>添加网站运行时间</h2><p>打开blog&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.njk（修改底部信息的顺序也在这）<br>运行时间精确到天，底部信息居的代码中是叫GPT写的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  function createtime() &#123;</span><br><span class="line">      var now = new Date();</span><br><span class="line">      var grt = new Date(&quot;7/30/2024 00:00:00&quot;); // 设置开始日期</span><br><span class="line">      var days = Math.floor((now - grt) / 1000 / 60 / 60 / 24); // 计算已运行天数</span><br><span class="line">      document.getElementById(&quot;timeDate&quot;).innerHTML = &quot;已运行 &quot; + days + &quot; 天 &quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  createtime(); // 初始调用</span><br><span class="line">  setInterval(createtime, 86400000); // 每天更新一次（86400000 毫秒 = 24 小时）</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .footer-container &#123;</span><br><span class="line">    text-align: center; /* 保证内容居中 */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .footer-content &#123;</span><br><span class="line">    display: flex; /* 使用flex布局 */</span><br><span class="line">    justify-content: center; /* 水平居中对齐 */</span><br><span class="line">    align-items: center; /* 垂直居中对齐 */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .copyright,</span><br><span class="line">  .runtime &#123;</span><br><span class="line">    margin: 0 10px; /* 添加左右间距 */</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>打开&#x2F;blog&#x2F;themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_common&#x2F;outline&#x2F;footer&#x2F;index.styl</p>
<p>底部添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.footer-container &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin: 0px;</span><br><span class="line">  padding: 0px;</span><br><span class="line">  background-color: transparent; /* 可选：页脚背景颜色 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.footer-container .beian,</span><br><span class="line">.footer-container .copyright,</span><br><span class="line">.footer-container .wordcount,</span><br><span class="line">.footer-container .busuanzi-count,</span><br><span class="line">.footer-container .powered-by &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="小插件"><a href="#小插件" class="headerlink" title="小插件"></a>小插件</h2><h3 id="自动添加空格"><a href="#自动添加空格" class="headerlink" title="自动添加空格"></a>自动添加空格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Automatically insert whitespace between CJK and half-width characters.</span><br><span class="line"># For more information: https://github.com/vinta/pangu.js</span><br><span class="line"># Server-side plugin: https://github.com/next-theme/hexo-pangu</span><br><span class="line">pangu: true</span><br></pre></td></tr></table></figure>

<h3 id="在-hexo-生成后删除不必要的文件"><a href="#在-hexo-生成后删除不必要的文件" class="headerlink" title="在 hexo 生成后删除不必要的文件"></a>在 hexo 生成后删除不必要的文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Remove unnecessary files after hexo generate.</span><br><span class="line">minify: true</span><br></pre></td></tr></table></figure>

<h3 id="网站优化加速"><a href="#网站优化加速" class="headerlink" title="网站优化加速"></a>网站优化加速</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Easily enable fast Ajax navigation on your website.</span><br><span class="line"># For more information: https://github.com/next-theme/pjax</span><br><span class="line">pjax: true</span><br></pre></td></tr></table></figure>


<h1 id="部署到GitHub-Pages"><a href="#部署到GitHub-Pages" class="headerlink" title="部署到GitHub Pages"></a>部署到GitHub Pages</h1><p>方法来自<a href="https://yangbingdong.com/2017/build-blog-hexo-base/#%E6%B3%A8%E5%86%8CGithub%E5%92%8CCoding%E5%B9%B6%E5%88%86%E5%88%AB%E5%88%9B%E5%BB%BAPages">这里</a></p>
<p>注意创建项目时<br>{user_name}.github.io, 其中{user_name}必须与你的用户名一样, 这是github pages的特殊命名规范</p>
<p>如果不想这样弄也是可以的，请见这篇<a href="https://notes.boshkuo.com/docs/Hexo/Basic/hexo-from-scratch-6">文章</a>，我没有去实操</p>
<h2 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h2><p><code>ssh-keygen -t rsa -C your_email@youremail.com</code></p>
<p>改成你的邮箱，之后会要求确认路径和输入密码, 懒得管就一路回车. 成功的话会在~&#x2F;下生成.ssh文件夹, 进去, 打开id_rsa.pub, 复制里面的key</p>
<p>首先是Github, 登录Github, 右上角 头像 -&gt; Settings —&gt; SSH nd GPG keys —&gt; New SSH key . 把公钥粘贴到key中, 填好title并点击 Add SSH key</p>
<h2 id="验证成功"><a href="#验证成功" class="headerlink" title="验证成功"></a>验证成功</h2><p><code>ssh -T git@github.com</code></p>
<p>如果是第一次的会提示是否continue, 输入** yes**  就会看到:<br>You’ve successfully authenticated, but GitHub does not provide shell access .<br>这就表示已成功连上github</p>
<h2 id="安装部署插件"><a href="#安装部署插件" class="headerlink" title="安装部署插件"></a>安装部署插件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h2 id="站点配置-1"><a href="#站点配置-1" class="headerlink" title="站点配置"></a>站点配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:Username/Username.github.io.git,master</span><br></pre></td></tr></table></figure>

<p>在我的环境下，只有这样的写法才能部署成功</p>
<p>下面这个方法也有很多大佬提过，但是我就是部署不上，所以就弃用了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/Username/Username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h2 id="部署至Github-Pages"><a href="#部署至Github-Pages" class="headerlink" title="部署至Github Pages"></a>部署至Github Pages</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>

<p>这样就大功告成了</p>
<h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>30号搭建完网站，9号才开始写总结，14号才写完，一直拖导致很多细节都忘记了，搭博客之前看到有人说搭博客比写博客好玩，看来还真有点道理。及时记录挺重要的。</p>
<p>博客还有很多不完善之处，这里把能想到的列出来，之后慢慢弄吧</p>
<ul>
<li><input disabled="" type="checkbox"> 评论系统</li>
<li><input disabled="" type="checkbox"> 优化cdn</li>
<li><input disabled="" type="checkbox"> 深浅色切换按钮</li>
</ul>
<p>搭建网站看了很多很多大佬的教程，感谢大佬们的无私分享<br>1.<a href="https://blog.csdn.net/as480133937/article/details/100138838">https://blog.csdn.net/as480133937/article/details/100138838</a><br>2.<a href="http://home.ustc.edu.cn/~liujunyan/blog/hexo-next-theme-config/">http://home.ustc.edu.cn/~liujunyan/blog/hexo-next-theme-config/</a><br>3.<a href="https://www.itfanr.cc/2021/04/16/hexo-blog-article-encryption/">https://www.itfanr.cc/2021/04/16/hexo-blog-article-encryption/</a><br>4.<a href="https://blog.csdn.net/jiunian_2761/article/details/122908619">https://blog.csdn.net/jiunian_2761/article/details/122908619</a><br>5.<a href="https://hexo-next.readthedocs.io/zh-cn/latest/">https://hexo-next.readthedocs.io/zh-cn/latest/</a><br>6.<a href="https://hst15701102464.github.io/2022/02/17/next%E4%B8%BA%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E8%BE%B9%E6%A1%86%E9%98%B4%E5%BD%B1-%E7%BB%9D%E5%AF%B9%E6%9C%89%E6%95%88/">https://hst15701102464.github.io/2022/02/17/next%E4%B8%BA%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E8%BE%B9%E6%A1%86%E9%98%B4%E5%BD%B1-%E7%BB%9D%E5%AF%B9%E6%9C%89%E6%95%88/</a><br>7.<a href="https://io-oi.me/tech/hexo-next-optimization/">https://io-oi.me/tech/hexo-next-optimization/</a><br>8.<a href="https://www.lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96/">https://www.lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96/</a><br>9.<a href="https://www.techgrow.cn/posts/abf4aee1.html#Next-8-x-%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E5%8F%AF%E5%88%87%E6%8D%A2%E7%9A%84%E6%9A%97%E9%BB%91%E6%A8%A1%E5%BC%8F">https://www.techgrow.cn/posts/abf4aee1.html#Next-8-x-%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E5%8F%AF%E5%88%87%E6%8D%A2%E7%9A%84%E6%9A%97%E9%BB%91%E6%A8%A1%E5%BC%8F</a><br>10.<a href="https://lanlan2017.github.io/blog/63f5df0e/#%E5%88%A0%E9%99%A4landscape%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">https://lanlan2017.github.io/blog/63f5df0e/#%E5%88%A0%E9%99%A4landscape%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6</a><br>11.<a href="https://theme-next.js.org/pisces/">https://theme-next.js.org/pisces/</a><br>12.<a href="https://siriusq.top/Next-8-0-%E5%8D%87%E7%BA%A7%E6%97%A5%E5%BF%97.html?highlight">https://siriusq.top/Next-8-0-%E5%8D%87%E7%BA%A7%E6%97%A5%E5%BF%97.html?highlight</a><br>13.<a href="https://vic.kim/2019/05/23/Hexo%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B%E6%A0%87%E7%AD%BE%E4%BA%91%E5%8F%8A%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA/">https://vic.kim/2019/05/23/Hexo%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B%E6%A0%87%E7%AD%BE%E4%BA%91%E5%8F%8A%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA/</a><br>14.<a href="https://notes.boshkuo.com/docs/Hexo/Advance/hexo-advanced-supplementary-1">https://notes.boshkuo.com/docs/Hexo/Advance/hexo-advanced-supplementary-1</a><br>15.<a href="https://yangbingdong.com/2017/build-blog-hexo-base/#GitHub">https://yangbingdong.com/2017/build-blog-hexo-base/#GitHub</a><br>16.<a href="https://blog.luzy.top/posts/456645515/">https://blog.luzy.top/posts/456645515/</a><br>17.<a href="https://www.iszy.cc/posts/a8mr7k/">https://www.iszy.cc/posts/a8mr7k/</a><br>18.<a href="https://blog.csdn.net/xingyuzhongxuan/article/details/125392822">https://blog.csdn.net/xingyuzhongxuan/article/details/125392822</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac使用spoof修改Mac地址</title>
    <url>/2024/04/21/Mac%E4%BD%BF%E7%94%A8spoof%E4%BF%AE%E6%94%B9Mac%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<p>使用brew安装spoof：<br><code>brew install spoof-mac</code></p>
<span id="more"></span>

<p>随机生成MAC地址(以en0 wifi为例）：</p>
<p><code>sudo spoof-mac randomize en0        ##端口名</code><br><code>spoof-mac randomize wi-fi           ##设备名</code></p>
<p>还原默认的MAC地址：</p>
<p><code>sudo spoof-mac reset en0</code></p>
<p>一些简短的用法示例：</p>
<p>列出可用设备：</p>
<p><code>spoof-mac list</code></p>
<p>列出可用设备，但仅列出wifi上的设备：</p>
<p><code>spoof-mac list --wifi</code></p>
<p>将设备MAC地址设置为指定的：</p>
<p><code>spoof-mac set 00:00:00:00:00:00 en0</code></p>
<p>参考文章: <a href="https://www.5axxw.com/wiki/content/otrm73">https://www.5axxw.com/wiki/content/otrm73</a></p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>PVE优化</title>
    <url>/2024/08/05/PVE%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>暑假闲来没事想起PVE这个底层系统还没怎么去折腾,就去翻了翻大佬们的优化教程。</p>
<span id="more"></span>

<h1 id="PVE优化工具"><a href="#PVE优化工具" class="headerlink" title="PVE优化工具"></a>PVE优化工具</h1><h2 id="x86派老虎大神"><a href="#x86派老虎大神" class="headerlink" title="x86派老虎大神"></a><a href="https://bbs.x86pi.cn/thread?topicId=20">x86派老虎大神</a></h2><img src="https://tcer.rr.nu/i/2024/08/05/66b055f209acb.png" width=50% height=50% />
我这次优化就只使用了一这款,因为能显示CPU的实时频率,还有网卡名称使用原始命名

<h2 id="pvetools"><a href="#pvetools" class="headerlink" title="pvetools"></a><a href="https://github.com/ivanhao/pvetools">pvetools</a></h2><p>PVE上star有4.1k(2024.8.5)<br><img src="https://tcer.rr.nu/i/2024/08/05/66b08fef1b584.webp" width=60% height=60% /></p>
<h2 id="恩山大佬shell脚本"><a href="#恩山大佬shell脚本" class="headerlink" title="恩山大佬shell脚本"></a><a href="https://www.right.com.cn/forum/thread-6754687-1-1.html">恩山大佬shell脚本</a></h2><p>开源地址<a href="https://github.com/a904055262/PVE-manager-status">https://github.com/a904055262/PVE-manager-status</a><br>这一款的功能比上面少一些了<br><img src="https://tcer.rr.nu/i/2024/08/05/66b05882259b3.jpg" width=75% height=75% /></p>
<h1 id="移除local-lvm存储空间"><a href="#移除local-lvm存储空间" class="headerlink" title="移除local-lvm存储空间"></a>移除local-lvm存储空间</h1><p>注意:<br>1、移除 local-lvm 后会导致虚拟机及 CT 容器的快照功能失效<br>2、移除前需自行关闭并备份各虚拟机、CT 容器等, 谨防移除造成数据丢失 </p>
<p>因为我用不上快照功能,所以把他移除了,移除后能更好利用硬盘资源<br>备份是备份在llocal里面的,可以放心删除local-lvm</p>
<p>恩山上的<a href="https://www.right.com.cn/forum/thread-3513183-1-1.html">帖子</a><br>1、备份虚拟机<br>2、删除虚拟机<br>3、删除local-lvm<br>命令：<code>lvremove pve/data</code><br>4、把local-lvm空间分配给Local<br>命令：<code>lvextend -l +100%FREE -r pve/root</code><br>5、删除local-lvm<br>数据中心-存储-删除local-lvm<br>6、编辑local，内容里添加 磁盘映像和容器<br>7、恢复虚拟机</p>
<p>懒得输命令就用老虎的脚本吧</p>
<p>虚拟机的安装以及还原,可以看看这两个视频<br><a href="https://www.bilibili.com/video/BV1aM4m1U7Fy/">https://www.bilibili.com/video/BV1aM4m1U7Fy/</a><br><a href="https://www.bilibili.com/video/BV1Gi421U78K/">https://www.bilibili.com/video/BV1Gi421U78K/</a></p>
<h1 id="开启iommu"><a href="#开启iommu" class="headerlink" title="开启iommu"></a>开启iommu</h1><h2 id="修改-etc-default-grub"><a href="#修改-etc-default-grub" class="headerlink" title="修改/etc/default/grub"></a>修改<code>/etc/default/grub</code></h2><p>在里面找到：GRUB_CMDLINE_LINUX_DEFAULT&#x3D;”quiet”<br>Intel cpu改为：GRUB_CMDLINE_LINUX_DEFAULT&#x3D;”quiet intel_iommu&#x3D;on”<br>AMD cpu请改为：GRUB_CMDLINE_LINUX_DEFAULT&#x3D;”quiet amd_iommu&#x3D;on”</p>
<p>我的文件里面是这些</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRUB_DEFAULT=0</span><br><span class="line">GRUB_TIMEOUT=5</span><br><span class="line">GRUB_DISTRIBUTOR=`lsb_release -i -s 2&gt; /dev/null || echo Debian`</span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet intel_iommu=on iommu=pt&quot;</span><br><span class="line">GRUB_CMDLINE_LINUX=&quot;net.ifnames=0 biosdevname=0&quot;</span><br></pre></td></tr></table></figure>
<p>##修改完成之后，直接更新grub<br><code>update-grub</code></p>
<h2 id="加载相应的内核模块"><a href="#加载相应的内核模块" class="headerlink" title="加载相应的内核模块"></a>加载相应的内核模块</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo vfio &gt;&gt; /etc/modules</span><br><span class="line">echo vfio_iommu_type1 &gt;&gt; /etc/modules</span><br><span class="line">echo vfio_pci &gt;&gt; /etc/modules</span><br><span class="line">echo vfio_virqfd &gt;&gt; /etc/modules</span><br></pre></td></tr></table></figure>
<p>也可以去<code>/etc/modules</code>直接添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vfio</span><br><span class="line">vfio_iommu_type1</span><br><span class="line">vfio_pci</span><br><span class="line">vfio_virqfd</span><br><span class="line">coretemp</span><br></pre></td></tr></table></figure>
<h2 id="重启主机"><a href="#重启主机" class="headerlink" title="重启主机"></a>重启主机</h2><h2 id="验证是否开启iommu"><a href="#验证是否开启iommu" class="headerlink" title="验证是否开启iommu"></a>验证是否开启iommu</h2><p>终端输入<br><code>dmesg | grep iommu</code><br>出现如下例子。则代表成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ 1.341100] pci 0000:00:00.0: Adding to iommu group 0</span><br><span class="line">[ 1.341116] pci 0000:00:01.0: Adding to iommu group 1</span><br><span class="line">[ 1.341126] pci 0000:00:02.0: Adding to iommu group 2</span><br><span class="line">[ 1.341137] pci 0000:00:14.0: Adding to iommu group 3</span><br><span class="line">[ 1.341146] pci 0000:00:17.0: Adding to iommu group 4</span><br></pre></td></tr></table></figure>
<p>或者输入<br><code>dmesg | grep &#39;remapping&#39;</code><br>出现如下例子。则代表成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AMD-Vi: Interrupt remapping enabled</span><br><span class="line">#或者</span><br><span class="line">DMAR-IR: Enabled IRQ remapping in x2apic mode</span><br></pre></td></tr></table></figure>

<p>此时输入命令<br><code>find /sys/kernel/iommu_groups/ -type l </code><br>#出现很多直通组，就代表成功了。如果没有任何东西，就是没有开启</p>
<h1 id="其他的一些优化"><a href="#其他的一些优化" class="headerlink" title="其他的一些优化"></a>其他的一些优化</h1><p>换源、移除订阅、修改概要信息、重命名网口用老虎大佬的一键脚本就行了</p>
<p>下面这个帖子对PVE系统的讲解很全,有需要的可以去看看<br><a href="https://www.chiphell.com/thread-2496541-1-1.html">https://www.chiphell.com/thread-2496541-1-1.html</a></p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol>
<li><a href="https://www.xh86.me/?p=724">https://www.xh86.me/?p=724</a></li>
<li><a href="https://foxi.buduanwang.vip/virtualization/pve/561.html/">https://foxi.buduanwang.vip/virtualization/pve/561.html/</a></li>
<li><a href="https://xxand.cc/84.html">https://xxand.cc/84.html</a></li>
<li><a href="https://bricawa.com/posts/56512/">https://bricawa.com/posts/56512/</a></li>
</ol>
]]></content>
      <tags>
        <tag>PVE</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS越狱及插件推荐</title>
    <url>/2024/08/27/iOS%E8%B6%8A%E7%8B%B1%E5%8F%8A%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<h1 id="为什么要越狱？"><a href="#为什么要越狱？" class="headerlink" title="为什么要越狱？"></a>为什么要越狱？</h1><p>获得更高的权限，安装大佬们开发的各种提升手机使用体验的插件，如：通话录音、左滑返回、Crane多开应用、分屏等。<span id="more"></span></p>
<p>如今的iOS更新似乎日渐乏味，许多新功能在越狱社区中早已被大佬们通过插件率先实现，有一些甚至做得比官方更好。将来，手机能否越狱，将成为我换机时考虑的最重要因素。（我对手机的依赖不高）</p>
<h1 id="越狱的种类（来自wiki）"><a href="#越狱的种类（来自wiki）" class="headerlink" title="越狱的种类（来自wiki）"></a>越狱的种类（来自<a href="https://zh.wikipedia.org/wiki/%E8%B6%8A%E7%8D%84_(iOS)#%E7%A7%8D%E7%B1%BB">wiki</a>）</h1><ul>
<li>不完美越狱（Tethered Jailbreak），指的是，当处于此状态的iOS设备开机重启后，之前进行的越狱程序就会失效，用户将失去Root权限，需要将设备连接电脑来使用（如特定版本下的红雪（redsn0w））等越狱软件进行引导开机以后，才可再次使用越狱程序。否则设备将无法正常开机。</li>
<li>完美越狱（Untethered Jailbreak），指设备在进行重启后，越狱状态仍被完整保留。iOS 9.0-9.0.2是最后一个可以完美越狱的版本。从iOS 10系统改变之后，再无完美越狱，简单分辨：重启、关机iOS设备之后，越狱环境依然还在。</li>
<li>半不完美越狱（Semi-tethered Jailbreak），指设备在重启后，将丢失越狱状态，并恢复成未越狱状态。如果想要恢复越狱环境，必须连接电脑并在越狱工具的引导下启动来恢复越狱状态。代表工具有checkra1n。</li>
<li>半完美越狱（Semi-untethered Jailbreak），指设备在重启后，将丢失越狱状态；而若想要再恢复越狱环境，只需使用越狱软件即可重新越狱。</li>
</ul>
<p>目前上述越狱级别中，完美越狱只能在iOS&#x2F;iPadOS 14或更低版本的iOS&#x2F;iPadOS中实现，而在iOS&#x2F;iPadOS 15中由于苹果公司加入了签署系统卷宗(SSV)的安全系统，使得已更新至iOS&#x2F;iPadOS 15的iOS设备越狱是无法获取部分目录(如&#x2F;system)的写入权限(称为无根越狱)，由于部分插件需要写入system分区，造成以往的插件都必须更新才能适配，好处是可以逃避部分软件对越狱的检测。A8-A11设备可以通过palera1n进行有根越狱，但是会占用16G的存储空间，空间不足会导致越狱失败。</p>
<h1 id="支持的设备及iOS版本"><a href="#支持的设备及iOS版本" class="headerlink" title="支持的设备及iOS版本"></a>支持的设备及iOS版本</h1><p>以下信息来自<a href="https://baike.iosfans.club/archives/yueyu">一些事一些情</a></p>
<ul>
<li><p>iOS 17.1  ~  17.4 + ：<br>A12  ~ A17处理器：无法越狱、无法巨魔商店、无法半越狱。俗称三无产品<br>A10X处理器：可以Palera1n越狱，目前最高支持iOS 17.3.1 （无根越狱）：<br>palera1n越狱工具</p>
</li>
<li><p>iOS 17.0、17.0 Beta1、17.0 Beta2、17.0 Beta3、17.0 Beta4：<br>A12  ~ A15 处理器：支持巨魔商店、支持半越狱，但是不支持直接安装，而是通过已安装巨魔的机器OTA升级到17.0，操作极其复杂，容易白苹果（这个方法现在已经失效）。这个版本不支持越狱！<br>巨魔商店安装、Serotonin半越狱<br>A10X处理器：可以Palera1n越狱、可以安装巨魔：<br>Palera1n越狱</p>
</li>
<li><p>iOS 16.7.8  ~  16.7：<br>A9X、A10X、A11处理器：专用版本，可以Palera1n越狱，可以越狱安装巨魔，但是重启失效：<br>Palera1n越狱</p>
</li>
<li><p>iOS 16.6  ~  16.6.1：<br>A12  ~ A15 处理器、M1、M2处理器：无法越狱，可以安装巨魔商店、半越狱：<br>巨魔商店安装、 Serotonin半越狱<br>A9X、A10X、A11处理器：可以安装巨魔、多巴胺2越狱、Palera1n越狱：<br>巨魔商店安装、多巴胺2越狱、Palera1n越狱，三有好青年，基本上都能玩！</p>
</li>
<li><p>iOS 16.0   ~  16.5.1：<br>A15 ~ A16处理器和M2处理器：可以安装巨魔、多巴胺2越狱、半越狱，只有16.5不可以多巴胺2越狱：<br>多巴胺2越狱、Serotonin半越狱、巨魔商店安装、<br>A12 ~ A14处理器和M1处理器：可以安装巨魔、多巴胺2越狱、半越狱：<br>多巴胺2越狱、Serotonin半越狱、巨魔商店安装、三有好青年，基本上都能玩！<br>A9X、A10X、A11处理器：可以安装巨魔、多巴胺2越狱、Palera1n越狱：<br>多巴胺2越狱、Palera1n越狱、巨魔商店安装、三有好青年，基本上都能玩！</p>
</li>
<li><p>iOS 15.8.1  ~  15.8.2：<br>A9  ~ A11处理器：可以安装巨魔、多巴胺2越狱、Palera1n越狱、Meowbrek2越狱：<br>多巴胺2越狱、Palera1n越狱、Meowbreak2越狱、巨魔商店安装、</p>
</li>
<li><p>iOS 15.0  ~  15.8：<br>A12  ~  A15处理器和M1处理器：在15.7+只可以巨魔商店，不支持越狱，在15.0  ~  15.6.1可以多巴胺2越狱：多巴胺2越狱、巨魔商店安装、<br>A9  ~ A11处理器：可以多巴胺2越狱、Palera1n越狱、Meowbrek2越狱、nekoJB越狱、SaiGon越狱：<br>多巴胺2越狱、Palera1n越狱、Meowbreak2越狱 、nekoJB越狱、SaiGon越狱</p>
</li>
<li><p>iOS 14.0  ~  14.8：<br>A12  ~  A14处理器：可以Taurine牛磺酸越狱、unc0ver越狱、巨魔商店：<br>牛磺酸越狱、unc0ver越狱<br>A9 ~ A11处理器：可以Taurine牛磺酸越狱、checkra1n越狱、巨魔商店：<br>牛磺酸越狱、checkra1n越狱、WinRa1n越狱</p>
</li>
<li><p>iOS 13.0  ~  13.7 ：<br>A12 ~ A13处理器：可以Odyssey奥德赛越狱、unc0ver越狱：<br>奥德赛越狱、unc0ver越狱<br>A9 ~ A11处理器：可以checkra1n越狱、Odyssey奥德赛越狱：<br>奥德赛越狱、checkra1n越狱</p>
</li>
<li><p>iOS 12.0  ~  12.5.7：<br>A12处理器：可以Chimera奇美拉越狱、unc0ver越狱：<br>奇美拉越狱、unc0ver越狱<br>A7 ~ A11处理器：可以Chimera奇美拉越狱：<br>奇美拉越狱、checkra1n越狱<br>奇美拉越狱仅对A7 ~ A11处理器支持12.1.3 ~ 12.5.7，iOS 12.0-12.1.2支持所有设备</p>
</li>
<li><p>iOS 11.0  ~  11.4：<br>A7 ~ A12处理器：可以unc0ver越狱（不支持A11以下）、可以 Electra 越狱：<br>Electra 越狱、unc0ver越狱</p>
</li>
<li><p>iOS 10. 0  ~  10.3.4：<br>A7  ~ A10处理器：可以doubleH3lix越狱、可以Meridian越狱、可以h3lix越狱、可以kok3shiX越狱：<br>kok3shiX越狱、h3lix越狱、Meridian越狱、doubleH3lix越狱<br>Meridian越狱是在线越狱，无需下载文件，使用Safari浏览器即可完成</p>
</li>
</ul>
<p>wiki上有更早的<a href="https://zh.wikipedia.org/wiki/%E8%B6%8A%E7%8D%84_(iOS)#%E5%81%9C%E6%AD%A2%E6%94%AF%E6%8C%81%E7%9A%84%E8%AE%BE%E5%A4%87">型号记录</a></p>
<h1 id="Dopamine2-安装"><a href="#Dopamine2-安装" class="headerlink" title="Dopamine2 安装"></a>Dopamine2 安装</h1><p>我的设备都是使用 Dopamine2 越狱，下面以 Dopamine2 为准</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul>
<li><a href="https://ellekit.space/dopamine/">Dopamine2官网</a></li>
<li><a href="https://github.com/opa334/Dopamine">Dopamine2官方 GitHub</a></li>
<li><a href="https://github.com/w2599/Dopamine">Dopamine2 真皮修改版</a>（推荐）</li>
<li><a href="https://github.com/wwg135/Dopamine">Dopamine2 M哥修改版</a></li>
</ul>
<p>下载后使用巨魔安装好，打开Dopamine2，点击越狱，选择插件包管理器（越狱插件商店），建议用Sileo，等待越狱处理，弹窗提示Set Password设置密码，这个是root密码，就是sudo需要的密码<br>等待越狱完成，黑屏后，手机是在软重启。桌面出现Sileo包管理器图标，越狱成功！现在打开Sileo，就可以开始安装插件了！</p>
<p>PS:这里如果点越狱 卡死或者重启可点击设置-内核漏洞-三个漏洞切换 试试哪一个可以成功</p>
<h2 id="更新-Dopamine"><a href="#更新-Dopamine" class="headerlink" title="更新 Dopamine"></a>更新 Dopamine</h2><ol>
<li>清除越狱后再用新版重新越狱是最好的，但是我插件比较多、人懒，以后试一试</li>
<li>越狱状态下打开Dopamine 2，会提示更新，点击更新然后软重启就好了</li>
<li>直接重启手机，卸载掉老版本的Dopamine 2，再去安装新版，重新越狱（我主用）</li>
</ol>
<h1 id="插件源的选择"><a href="#插件源的选择" class="headerlink" title="插件源的选择"></a>插件源的选择</h1><p>越狱安装到不安全的插件是很容易白的，Split-view-pro那时候见过一张聊天截图，找不到图片了。大概意思就是 “插件作者要白一个设备是很简单的”，所以我们不能乱安装来路不明的插件<br>我对插件源的选择（仅是个人使用习惯）</p>
<p> “正版” 源（Havoc、Chariz、作者官方等）&gt; 刀刀源等（有自编译的插件，提供很多汉化包）TG大频道主维护的源 &gt; 搬运工源和M哥源（看插件版本选择）</p>
<p>在用破解插件的时候，版本一致时，有中文需求可以选择搬运工源，搬运工会把中文包整合在一起</p>
<p>多米诺骨源、Cydiakk中文源、雷锋源（三个都是老牌源）等等，用的不多</p>
<p>从这个网站 <a href="https://www.ios-repo-updates.com/">https://www.ios-repo-updates.com/</a> 搜索插件名，然后出来的大部分都是官方源</p>
<h1 id="添加越狱源"><a href="#添加越狱源" class="headerlink" title="添加越狱源"></a>添加越狱源</h1><p>复制以下的软件源，打开Sileo会提示你是否导入，选择“是”就好了</p>
<p>下面有几个源提示风险，有风险的软件源里面大部分都能在别的软件源找到，找不到的大概率也用不上，所以自行考虑是否添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://repo.cypwn.xyz/</span><br><span class="line">https://rootless.002599.xyz/</span><br><span class="line">https://lans233.github.io/</span><br><span class="line">https://byg.iosios.net/</span><br><span class="line">https://wwg135.github.io/</span><br><span class="line">https://0xkuj.yourepo.com/</span><br><span class="line">https://lenglengyu.com/</span><br><span class="line">https://repo.cydiabc.top/</span><br><span class="line">http://akusio.github.io/</span><br><span class="line">https://alias20.gitlab.io/apt/</span><br><span class="line">https://repo.anamy.gay/</span><br><span class="line">https://repo.anthopak.dev/</span><br><span class="line">https://0xash.yourepo.com/</span><br><span class="line">http://apt.thebigboss.org/repofiles/cydia/</span><br><span class="line">https://brendonjkding.github.io/</span><br><span class="line">https://repo.chariz.com/</span><br><span class="line">https://creaturecoding.com/repo/</span><br><span class="line">https://cydiageek.yourepo.com/</span><br><span class="line">https://apt.cydiakk.com/</span><br><span class="line">http://dcsyhi1998.github.io/</span><br><span class="line">https://dhinakg.github.io/repo/</span><br><span class="line">https://ellekit.space/</span><br><span class="line">https://nahtedetihw.github.io/</span><br><span class="line">https://apt.geometricsoftware.se/</span><br><span class="line">https://ginsu.dev/repo/</span><br><span class="line">https://havoc.app/</span><br><span class="line">https://cydia.ichitaso.com/</span><br><span class="line">https://repo.icrazeios.com/</span><br><span class="line">http://aquawu.github.io/igg/</span><br><span class="line">https://repo.ikghd.me/</span><br><span class="line">https://iosgods.com/repo/</span><br><span class="line">https://ios.jjolano.me/</span><br><span class="line">https://julio.hackyouriphone.org/</span><br><span class="line">https://khanhduytran0.github.io/repo/</span><br><span class="line">https://level3tjg.me/repo/</span><br><span class="line">https://liam.page/oldabi/</span><br><span class="line">http://limneos.net/repo/</span><br><span class="line">https://34306.github.io/</span><br><span class="line">https://lizynz.github.io/</span><br><span class="line">https://luki120.github.io/</span><br><span class="line">https://miro92.com/repo/</span><br><span class="line">https://jailrepo.initnil.com/</span><br><span class="line">https://invalidunit.github.io/netskao-archive/</span><br><span class="line">https://repo.niceios.com/</span><br><span class="line">https://cydia.nixuge.me/</span><br><span class="line">https://opa334.github.io/</span><br><span class="line">https://p2kdev.github.io/repo/</span><br><span class="line">https://repo.palera.in/</span><br><span class="line">http://apt.curtin.top/</span><br><span class="line">https://poomsmart.github.io/repo/</span><br><span class="line">https://apt.procurs.us/</span><br><span class="line">https://cydia.rob311.com/repo/</span><br><span class="line">https://roothide.github.io/</span><br><span class="line">https://iosjb.top/</span><br><span class="line">https://skypain.github.io/repo/</span><br><span class="line">https://0xilis.github.io/rootless/</span><br><span class="line">https://sparkdev.me/</span><br><span class="line">https://ugly-soul.github.io/repo/</span><br><span class="line">https://apt.sutuplus.com/</span><br><span class="line">https://themepro.yourepo.com/</span><br><span class="line">http://tigisoftware.com/repo/</span><br><span class="line">http://tigisoftware.com/cydia/</span><br><span class="line">https://www.yourepo.com/</span><br><span class="line">https://invalidunit.github.io/repo/</span><br><span class="line">https://invalidunit.github.io/repo2/</span><br><span class="line">https://zerui18.github.io/zx02/</span><br><span class="line">https://lclrc.github.io/repo/</span><br><span class="line">https://xiangfeidexiaohuo.github.io/</span><br><span class="line">https://apt.wxhbts.pro/</span><br><span class="line">https://ios.iosyyds.com/</span><br><span class="line">https://laileld.github.io/repo/</span><br><span class="line">http://apt.htv123.com/</span><br><span class="line">https://apt.25mao.com/</span><br><span class="line">https://repo.snailovet.com/</span><br><span class="line">https://cydia.dumpapp.com/</span><br></pre></td></tr></table></figure>

<h1 id="推荐插件"><a href="#推荐插件" class="headerlink" title="推荐插件"></a>推荐插件</h1><h2 id="免费插件"><a href="#免费插件" class="headerlink" title="免费插件"></a>免费插件</h2><ul>
<li><p>SettingsRevamp（刀刀源，官方源停了<a href="https://sopppra.mooo.com)/">https://sopppra.mooo.com）</a><br>自定义设置，和Shuffle一样都是收纳插件,推荐用SettingsRevamp</p>
</li>
<li><p>Atria（Chariz）<br>桌面布局修改</p>
</li>
<li><p>iCleaner Pro（刀刀源）<br>垃圾清理，禁用插件启动</p>
</li>
<li><p>AppDate（Netskao）<br>快捷降级AppStore应用版本<br>快捷清理缓存<br>快捷打开应用安装和数据目录</p>
</li>
<li><p>左滑返回（来了老弟）<br>右手党神器</p>
</li>
<li><p>Hammer It （Havoc）<br>分词大爆炸，快速翻译插件，配合 Snapper 3很好用</p>
</li>
<li><p>CCBorder16（刀刀源）<br>类iOS18样式的控制中心，添加音量，亮度的百分比，用了就回不去了</p>
</li>
<li><p>CCless++（刀刀源）<br>控制中心模块集合，安装好去控制中心添加自己需要的吧</p>
</li>
<li><p>语音转文字免跳转（刀刀源）<br>App内调用输入法的“语音转文字”功能时，免去跳转的过程</p>
</li>
<li><p>Axon（刀刀源）<br>锁屏通知聚合</p>
</li>
<li><p>PassByCC（冷冷雨）<br>控制中心添加绕过密码的模块，推荐1.0.2版本，无设置选项</p>
</li>
<li><p>BackgrounderAction15 CCSupport（Akusio）<br>控制中心添加真后台模块</p>
</li>
<li><p>BetterCCBrightness（level3tjg）<br>为控制中心亮度模块界面拓展出很多功能，插件无设置项</p>
</li>
<li><p>强制第三方输入法（来了老弟）<br>在任意密码框可允许第三方输入法输入（银行等特制键盘除外）</p>
</li>
<li><p>去除键盘延迟（来了老弟）<br>去除键盘的延迟(主用作于第三方,若没有延迟,则不用装)</p>
</li>
<li><p>双击锁屏（来了老弟）<br>双击桌面空白处锁屏</p>
</li>
<li><p>DoubleClickWake（来了老弟）<br>双击亮屏，与AOD冲突</p>
</li>
<li><p>System Info（来了老弟）<br>显示 iOS 所有系统信息</p>
</li>
<li><p>禁用拍照声音（搬运工）</p>
</li>
<li><p>Kayoko<br>剪切板软件，iOS16推荐安装CyPwn源的1.4.2-4版本</p>
</li>
<li><p>OLED Dark Mode（YouReo）<br>让深色模式的灰色变成纯黑</p>
</li>
<li><p>Dock X（乌贼）<br>键盘底部（地球键和听写键中间）添加功能按键</p>
</li>
<li><p>VPNlndicator（乌贼）<br>启用VPN时自定义状态栏的Wi-Fi或蜂窝信号图标颜色</p>
</li>
<li><p>启用 MagSafe充电动画（乌贼）<br>将设备连接到电源时，在锁定屏幕上启用原生MagSafe充电动画</p>
</li>
<li><p>NoPassAfterRespring（乌贼）<br>在注销前是解锁状态的情况下，注销后自动跳过人脸或指纹识别到桌面</p>
</li>
<li><p>禁用iOS16+粘贴警告弹窗和粘贴提醒（乌贼）<br>禁用iOS16+粘贴警告弹窗，并自动允许</p>
</li>
<li><p>NoLowPowerMode30SecAutoLock（Brend0n）<br>可在低功耗模式下调整自动锁定时间间隔</p>
</li>
<li><p>SwipeSelection（iCraze）<br>系统自带键盘任意位置滑动移动光标，无需长按空格</p>
</li>
<li><p>AutoFaceUnlock（Netskao）<br>面容识别成功自动解锁无需滑动</p>
</li>
<li><p>Killapps（Netskao）<br>一键关闭所有后台</p>
</li>
<li><p>Cylinder Reborn（Chariz）<br>桌面翻页特效</p>
</li>
<li><p>QuickActions（Chariz）<br>修改锁屏手电，相机按钮为其他App</p>
</li>
<li><p>FakeSignalBar（alias20）<br>修改运营商、信号强度、蜂窝链接等 </p>
</li>
<li><p>DownloadBar13（alias20）<br>App Store下载、更新APP软件显示进度条</p>
</li>
<li><p>StoreSwitcher2（YouRepo）<br>快速切换AppStore账号</p>
</li>
<li><p>IAPStore（冷冷雨）<br>软件内购破解，仅支持部分小规模App</p>
</li>
<li><p>Velvet 2（Havoc）<br>美化多猜通知横幅</p>
</li>
<li><p>Speedster（Havoc）<br>加速iOS的各种动画</p>
</li>
<li><p>SquidGesture（Havoc）<br>手势调整，为状态栏、Dock、设备底部、实体按键添加各种快捷操作<br>有 SquidGesture Pro 功能更加丰富</p>
</li>
<li><p>CloseAll（Havoc）<br>App切换界面右上角添加一个<code>Close</code>按钮，可一键退出所有后台，正在播放的App不会退出，无设置</p>
</li>
<li><p>Zaire（Luki120）<br>iPhone Storage 页面中显示已安装的应用程序的数量</p>
</li>
<li><p>CustomLPM（BigBoss）<br>自定义低电量模式，锁屏低电量，lans233源有汉化版</p>
</li>
<li><p>LowPowerSleep锁屏自动低电量（乌贼）<br>我的设备无法使用，用<code>CustomLPM</code>代替</p>
</li>
<li><p>WeChatNotiAvatar、QQNotiAvatar（Netskao）<br>WeChat、QQ通知显示头像信息</p>
</li>
<li><p>DumpDecrypter（Netskao）<br>全权限砸壳</p>
</li>
<li><p>HideSerialNumber（ichitaso）<br>修改关于本机页面的信息</p>
</li>
<li><p>Hello Area（真皮）<br>控制底栏的高度</p>
</li>
<li><p>Hello 3Q（真皮）<br>禁用ios热启动神经网络引擎,别在后台热加载app<br>-优点：节约内存，少杀后台<br>-玄学：减少重启概率</p>
</li>
<li><p>Hello App（真皮）<br>屏蔽 AppStore 里面的软件更新</p>
</li>
<li><p>ChargeLimiter（GitHub）<br>iOS开发的AlDente替代工具,适用于长时间过充情况下保护电池健康度<br>Havoc源有老版，推荐去作者的GitHub下载<br><a href="https://github.com/lich4/ChargeLimiter">https://github.com/lich4/ChargeLimiter</a></p>
</li>
<li><p>PadSwitcher（ABox）<br>在iPhone上启用iPad风格的多任务界面和Dock栏，ABox的比较好用</p>
</li>
<li><p>NetworkManagerReborn（Nixuge）<br>控制中心切换2G、3G、4G、5G</p>
</li>
<li><p>PMP（iKarwan）<br>三个CC模块，手机相册照片显示为空、隐藏最近删除照片、隐藏相机左下角照片</p>
</li>
<li><p>微信</p>
</li>
</ul>
<p>应用程序的插件，能用TrollFools注入的，我都用注入了</p>
<p>锤子助手（微信净化）<br>微信助手（密友）<br>黄白助手（可以备份各插件的配置）<br>虚拟视频（我用这个的CallKit）<br>PKC         （消息统计）<br>Misaka    （分组功能，作者退圈了，拿不到授权用不了）<br>斗图助手<br>消息屏蔽 （屏蔽一些群消息）<br>插件管理 （把插件归类在 “我” 的 “插件” 页面）</p>
<ul>
<li>QQ</li>
</ul>
<p>QQ净化<br>芭比Q<br>图层（我就用了这一个）</p>
<h2 id="屏蔽越狱插件"><a href="#屏蔽越狱插件" class="headerlink" title="屏蔽越狱插件"></a>屏蔽越狱插件</h2><p>越狱后有一些银行、支付软件会无法使用，这时候我们需要屏蔽掉这些App的越狱检测</p>
<ul>
<li>Choicy（BigBoss）</li>
</ul>
<p>opa334大佬开发的，可自定义注入插件</p>
<ul>
<li>DopamineBlackList （真皮）</li>
</ul>
<p>Dopamine 2 加入了真皮底层屏蔽代码（真皮和M哥修改版都有）才可使用该软件<br>也可不安装插件在<code>/var/mobile/zp.unject.plist</code>文件里面自己添加App<br>配合“禁止注入之长按图标-rootless”插件使用更方便</p>
<ul>
<li>Hello Joker（真皮）¥22.22</li>
</ul>
<p>有一些App会检测越狱APP(Sileo,Filza等)，所以屏蔽插件注入后有一些App能检测到越狱，使用该插件可以关闭被越狱APP识别，来进一步提升屏蔽效果</p>
<p>安装后可以在控制中心添加一个模块，在需要跳转到Sileo的时候需要让模块亮起，模块亮起就是关闭该插件的功能，使用完记得关闭。在Sileo登录Havoc账号时就需要关闭，不然登不上</p>
<p>插件是Hello 120Hz、Hello CPU一起的打包，所以要¥22.22，我当时8.88买的，小赚😁</p>
<ul>
<li>DismissAlert【屏蔽弹窗】（冷冷雨）</li>
</ul>
<p>强制取消系统弹窗，如授权弹窗、app签名到期弹窗等等。</p>
<p>农业银行App在9.2版本后，越狱检测力度突然变强，刚开始还可以降级用，后面不升级不给用，来了老弟的插件也失效了，大家发现这个插件可以使用，就先用着</p>
<p>就这农业银行屁事多，要不是学校的卡是这个银行的，限额比较正常，我立马去把户销了</p>
<ul>
<li><p>魔术师（电话助手）<br>和电话助手一起的，听说效果挺好</p>
</li>
<li><p>Dopamine 2 App<br>设置–隐藏越狱，此方法可能会丢失插件数据（我丢过Atria），用完记得恢复</p>
</li>
</ul>
<h2 id="分屏插件"><a href="#分屏插件" class="headerlink" title="分屏插件"></a>分屏插件</h2><ul>
<li><p>Split-view-pro（sunshineSong）¥100<br>免费版本足够我的需求了，就没有去付费更新，<a href="https://www.bilibili.com/video/BV11gpQeqE8E/">作者新功能演示</a></p>
</li>
<li><p>Zetsu （Chariz）<br>挺好用的分屏插件，总是会把PullOver Pro的侧边图标给弄出来，我又不是经常使用，就卸了</p>
</li>
<li><p>PullOver Pro（Netskao’s JailRepo）<br>在Split-view-pro出来之前我一直使用的，在不跳转当前页面的情况下，从侧边栏快捷使用自己设置的软件，配合乌贼的<code>HidePullOver 隐藏 PullOver小把手</code>使用</p>
</li>
<li><p>O2 Pro<br>听过这个插件要几百，就没有去了解</p>
</li>
</ul>
<h2 id="付费插件"><a href="#付费插件" class="headerlink" title="付费插件"></a>付费插件</h2><ul>
<li>NiceCaller、电话助手 ¥20</li>
</ul>
<p>国人开发的通话录音插件，大家自行去了解哪一个更好吧，我是因为Nice的作者开发了巨魔版的通话录音，后面发现越狱也可以使用，就没有去买电话助手了<br>购买激活码地址：（过年可能有半价活动）<br><a href="https://www.kuaifa¥50et/purchasing?link=BWcmx">NiceCaller</a><br><a href="https://www.kuaifaka.net/purchasing?link=TL0lu2">电话助手</a></p>
<ul>
<li>Nice真灵动岛 ¥50</li>
</ul>
<p>通知上岛，有几个类似的插件，可以都去试试。<br>Nice的是第一个真岛，当时有团购¥30，我就冲了</p>
<ul>
<li>Hello 120Hz、Hello CPU、Hello Joker ¥22.22</li>
</ul>
<p>真皮的Hello系列<a href="https://shop.phpwc.info/details/88870F88">购买地址</a></p>
<p>Hello 120Hz：动态120Hz解锁，苹果在大多数应用程序滚动时将刷新率限制为80Hz。此插件可以动态地解锁系统范围内的120Hz刷新率,使设备在支持的情况下平滑显示内容。</p>
<p>Hello CPU：解除温控，锁定低电量CPU频率</p>
<p>Hello Joker ：默认关闭越狱APP(Sileo,Filza等)被识别，<a href="#%E5%B1%8F%E8%94%BD%E8%B6%8A%E7%8B%B1%E6%8F%92%E4%BB%B6">屏蔽越狱插件提到过</a></p>
<ul>
<li>Hello Folder ¥11.11</li>
</ul>
<p>自定义文件夹显示的行数和列数，透明背景、边框线、图标阴影<br><a href="https://shop.phpwc.info/details/E6C775D0">购买地址</a></p>
<ul>
<li>FT Tool、Panel Tools、ST Tool</li>
</ul>
<p>来了老弟开发的插件</p>
<p>FT Tool <a href="https://www.wcfaka.com/details/3514478B">¥21.88</a>：手机上面显示的文本都可以更改替换，微信和QQ修改需要联系作者解锁，不知道是否要花钱，不知是否还有其他需解锁软件，还有很多功能可自行了解</p>
<p>Panel Tools <a href="https://www.wcfaka.com/details/A6D68F4B">¥15.88</a>：键盘增强工具，在键盘上面加一行工具栏，还有快捷指令设定，能接入各种好玩的API</p>
<p>ST Tool <a href="https://www.wcfaka.com/details/66D50EB6">¥10.10</a>：对于应用软件的图片，可做到：无水印拿图，直接分享，复制到剪切板，图片分割，文字水印，涂鸦，截图，保存到相册，圆角处理，直接马赛克等功能，非100%应用或场景支持</p>
<ul>
<li>Colorful Wallpaper X（Havoc）$3.99<br>动态渐变壁纸</li>
</ul>
<h2 id="有破解的插件"><a href="#有破解的插件" class="headerlink" title="有破解的插件"></a>有破解的插件</h2><ul>
<li><p>Crane（Havoc）$4.99<br>opa334开发的多开软件，它为App创造多个容器来实现多开，我用来学习通多开，做到一顶六😂（学习通6.3.0及能检测到多开了😭）<br>opa344是TrollStore和Dopamine的主要开发者，你难道还想白嫖？<br>可以去试用一下 Crane Lite，一次只能用于一个应用程序，试用一下再考虑购买<br>搬运工有1.3.14-6的老版本破解</p>
</li>
<li><p>Snapper3 （Havoc）$3.49<br>屏幕截图增强，配合Hammer It来OCR、翻译很棒，安装BigShot会有长截图按钮，只有1.0的破解</p>
</li>
<li><p>InstaLauncher2 （Havoc）$3.49<br>侧边栏快捷启动App</p>
</li>
<li><p>Senri（Chariz）$1.49<br>Senri会记录设备收到的通知所有通知，在设置–Notifications–Notification Records（最上面），可以查看</p>
</li>
<li><p>AirpodsCompanion（Havoc）$1.99<br>美化增强音量滑块，我用来控制AirPods Pro的降噪，用得很少</p>
</li>
<li><p>Smartnetwork（Havoc）$1.99<br>自定义Wi-Fi和蜂窝，我就使用“安全Wi-F”（连接指定的Wi-Fi时，不用输入密码），因为PassBy总是忘记关，其他的跳过密码插件又没有适配，就只能用这个了</p>
</li>
<li><p>Touch-Viz（Havoc）$1.99<br>显示触摸交互，只有2.8版本的破解</p>
</li>
<li><p>Fiona（Havoc）$0.99<br>美化软件的底栏，只有1.0.6的破解</p>
</li>
<li><p>TwistNTurn（YouRepo）$1.99<br>设备屏幕旋转，在竖屏锁定、手机横向时，出现一个图标，点击即可旋转屏幕</p>
</li>
</ul>
<h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><h2 id="更改插件语言"><a href="#更改插件语言" class="headerlink" title="更改插件语言"></a>更改插件语言</h2><p>手机设置的是英文，有一些插件却看不懂，如何切换中文？</p>
<p>Filza打开下面的路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/private/preboot/**一长串字符**/dopamine-laUZ2Q/procursus/Library/PreferenceBundles</span><br></pre></td></tr></table></figure>

<p>或者在Sileo–软件包，选择已安装的插件，滑到页面底部，“显示软件包内容”，找到<code>PreferenceBundles</code>的目录，长按文件能 “复制目录” 和在 “Filza打开” （如果安装了 “Hello Joker” 需要关闭插件后重新进入页面才能显示）</p>
<p>找到需要修改语言的插件的文件夹，<code>*.lproj</code>就是语言包，把中文包里面的文件复制，把英文包的替换就可以了，如有需要，请自行备份英文语言包，或者重新安装插件，不要在语言包里放置无关文件，不然插件可能会出错，替换后，清掉设置App的后台，再打开对应插件就可以看到效果了</p>
<p>有一些在<code>PreferenceBundles</code>找不到的插件可以去上级目录下找<code>Application Support</code>文件夹，同样的替换操作。</p>
<h2 id="修改设置的插件名"><a href="#修改设置的插件名" class="headerlink" title="修改设置的插件名"></a>修改设置的插件名</h2><p>Sileo–软件包–选择需要修改的插件–显示软件包内容–找到 <code>**.plist </code> 在Filza打开，修改label的数值即可</p>
<h2 id="一些路径"><a href="#一些路径" class="headerlink" title="一些路径"></a>一些路径</h2><p>插件配置文件路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/private/preboot/&#123;manifest_hash&#125;(一长串字符)/dopamine-laUZ2Q/procursus/var/mobile/Library/Preferences</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">/var/jb/var/mobile/Library/Preferences</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>软件源文件路径（有根）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/private/preboot/&#123;manifest_hash&#125;(一长串字符)/dopamine-laUZ2Q/procursus/etc/apt/sources.list.d</span><br></pre></td></tr></table></figure>


<p>插件Bundle路径：<code>/var/jb/Library/PreferenceBundles</code></p>
<p>插件目录路径：<code>/var/jb/Library/MobileSubstrate/DynamicLibraries</code></p>
<p>插件设置配置路径：<code>/var/jb/Library/PreferenceLoader/Preferences</code></p>
<p>插件动态库路径：<code>/var/jb/Library/MobileSubstrate/DynamicLibraries</code></p>
<p>App安装路径（包括巨魔安装残留）路径：<code>/var/mobile/Containers/Data/Application</code></p>
<p>Application Support路径：<code>/var/jb/Library/Application Support</code></p>
<p>原生键盘词库路径：<code>/var/mobile/Library/KeyboardServices</code></p>
<p>控制中心Bundle路径：<code>/var/jb/Library/ControlCenter/Bundles</code></p>
<p>Info List路径：<code>/var/jb/var/lib/dpkg/info</code></p>
<h2 id="清除越狱"><a href="#清除越狱" class="headerlink" title="清除越狱"></a>清除越狱</h2><p> Dopamine 的「清除越狱」功能 <a href="https://www.feng.com/post/13704673">https://www.feng.com/post/13704673</a> </p>
<h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>看到这里，你已经入门越狱了，开始折腾吧！</p>
<p><del>不要为了越狱放弃升级的乐趣！！！</del></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>越狱</tag>
      </tags>
  </entry>
  <entry>
    <title>屏蔽 bilibili 垃圾CDN</title>
    <url>/2024/09/24/%E5%B1%8F%E8%94%BD%20bilibili%20CDN/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>用了 Mac 之后使用 Chrome 看 bilibili 的视频总是会特别的卡顿，明明带宽没占满，速度确是一直起不来，后面发现原来是 CDN 的问题<span id="more"></span>，<a href="https://rec.danmuji.org/dev/cdn-info/#%E8%87%AA%E5%BB%BA%E8%A7%86%E9%A2%91%E4%BA%91%E5%9F%9F%E5%90%8D">录播姬整理的 CDN</a>、<a href="https://www.txrjy.com/thread-1218482-1-1.html">论坛老哥整理的CDN</a>、<a href="https://www.v2ex.com/t/830394">V2EX的帖子</a></p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><ol>
<li><p><a href="https://greasyfork.org/zh-CN/scripts/415714-make-bilibili-great-again">Make BiliBili Great Again</a></p>
<p><a href="https://www.shawnleetttt.cyou/posts/457eb4a4/">这篇文章</a>说要把 108 行处 <code>urlObj.port = 443</code> 改为 <code>urlObj.port = 4483</code>，我也不知道改了有什么用</p>
</li>
<li><p><a href="https://greasyfork.org/zh-CN/scripts/500519-%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9-%E5%B1%8F%E8%94%BD%E8%A7%86%E9%A2%91pcdn%E5%9C%B0%E5%9D%80">【哔哩哔哩】屏蔽视频PCDN地址</a></p>
</li>
</ol>
<h2 id="Clash"><a href="#Clash" class="headerlink" title="Clash"></a>Clash</h2><p>脚本是挺方便的，但是手机用不了啊，看到<a href="https://mymuwu.net/?p=1427">这一篇文章</a>发现大佬把PCDN的域名给总结出来了，但是只有 AdGuardHome 的，于是就把它弄成Clash的规则了，<a href="https://github.com/tunecc/clash/blob/main/Block_PCDN.list">我整理的地址</a>，<a href="https://github.com/thhbdd/Block-pcdn-domains">大佬的GitHub地址</a></p>
<p>Clash 不支持正则表达式，所以下面的地址没有包括</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/.*pcdn.*biliapi\.net/</span><br><span class="line">/.*pcdn.*youku\.com/</span><br><span class="line">/.*p2p.*douyucdn\.cn/</span><br><span class="line">/.*p2p.*qq\.com/</span><br><span class="line">/.*pcdn.*biliapi.net/</span><br><span class="line">/.*pcdn.*youku.com/</span><br><span class="line">/cn-.*\.bilivideo\.(com|cn)/         #屏蔽这个会导致看不了直播</span><br></pre></td></tr></table></figure>

<h2 id="Mosdns"><a href="#Mosdns" class="headerlink" title="Mosdns"></a>Mosdns</h2><p>Mosdns 支持正则表达式，所以可以使用以下参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">domain:gjfzpt.cn</span><br><span class="line">domain:szbdyd.com</span><br><span class="line">domain:bsccdn.net</span><br><span class="line">domain:pkoplink.com</span><br><span class="line">domain:saxysec.com</span><br><span class="line">domain:uhabo.com</span><br><span class="line">domain:xycdn.com</span><br><span class="line">domain:kuiniuca.com</span><br><span class="line">domain:onethingpcs.com</span><br><span class="line">domain:jomodns.cn</span><br><span class="line">domain:p2p.huya.com</span><br><span class="line">domain:stun.douyucdn.cn</span><br><span class="line">domain:stun.hitv.com</span><br><span class="line">domain:stun1.douyucdn.cn</span><br><span class="line">domain:mcdn.bilivideo.cn</span><br><span class="line">domain:tpa-hcdn.iqiyi.com</span><br><span class="line">domain:pcdn.xmcdn.com</span><br><span class="line">domain:pcdn.yximgs.com</span><br><span class="line">regexp:.*pcdn.*biliapi\.net</span><br><span class="line">regexp:.*pcdn.*youku\.com</span><br><span class="line">regexp:.*p2p.*douyucdn\.cn</span><br><span class="line">regexp:.*p2p.*qq\.com</span><br><span class="line">regexp:.*pcdn.*biliapi\.net</span><br><span class="line">regexp:.*pcdn.*youku\.com</span><br><span class="line">regexp:cn-.*\.bilivideo\.com$            #屏蔽这个会导致看不了直播</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><p>1.我目前使用的是 Clash + Mosdns（正则规则）</p>
<p>2.Make BiliBili Great Again 有一些优化代码还是挺有用的，去除“ 去 P2P CDN”后的代码如下</p>
<details>
  <summary>点我展开</summary>
  <pre><code>
// ==UserScript==
// @name         Make BiliBili Great Again
// @namespace    https://www.kookxiang.com/
// @version      1.5.5
// @description  useful tweaks for bilibili.com
// @author       kookxiang
// @match        https://*.bilibili.com/*
// @run-at       document-body
// @grant        unsafeWindow
// @grant        GM_addStyle
// @grant        GM_notification
// @downloadURL https://update.greasyfork.org/scripts/415714/Make%20BiliBili%20Great%20Again.user.js
// @updateURL https://update.greasyfork.org/scripts/415714/Make%20BiliBili%20Great%20Again.meta.js
// ==/UserScript==
// 去掉叔叔去世时的全站黑白效果
GM_addStyle("html, body &#123; -webkit-filter: none !important; filter: none !important; &#125;");

<p>&#x2F;&#x2F; 没用的 URL 参数<br>const uselessUrlParams &#x3D; [<br>    ‘buvid’,<br>    ‘is_story_h5’,<br>    ‘launch_id’,<br>    ‘live_from’,<br>    ‘mid’,<br>    ‘session_id’,<br>    ‘timestamp’,<br>    ‘up_id’,<br>    ‘vd_source’,<br>    &#x2F;^share&#x2F;,<br>    &#x2F;^spm&#x2F;,<br>];</p>
<p>&#x2F;&#x2F; Block WebRTC，CNM 陈睿你就缺这点棺材钱？<br>try &#123;<br>    Object.defineProperty(unsafeWindow, ‘webkitRTCPeerConnection’, &#123; value: undefined, enumerable: false, writable: false &#125;);<br>&#125; catch (e) &#123; &#125;</p>
<p>&#x2F;&#x2F; 移除鸿蒙字体，系统自带它不香吗？<br>window.addEventListener(‘load’, function () &#123;<br>    document.body.classList.remove(‘harmony-font’);<br>&#125;)</p>
<p>&#x2F;&#x2F; 首页优化<br>if (location.host &#x3D;&#x3D;&#x3D; “<a href="http://www.bilibili.com/">www.bilibili.com</a>“) &#123;<br>    GM_addStyle(‘.feed2 .feed-card:has(a[href*&#x3D;”cm.bilibili.com”]) &#123; display: none &#125; .feed2 .container &gt; * &#123; margin-top: 0 !important &#125;’);<br>&#125;</p>
<p>&#x2F;&#x2F; 动态页面优化<br>if (location.host &#x3D;&#x3D;&#x3D; “t.bilibili.com”) &#123;<br>    GM_addStyle(“html[wide] #app &#123; display: flex; &#125; html[wide] .bili-dyn-home–member &#123; box-sizing: border-box;padding: 0 10px;width: 100%;flex: 1; &#125; html[wide] .bili-dyn-content &#123; width: initial; &#125; html[wide] main &#123; margin: 0 8px;flex: 1;overflow: hidden;width: initial; &#125; #wide-mode-switch &#123; margin-left: 0;margin-right: 20px; &#125; .bili-dyn-list__item:has(.bili-dyn-card-goods), .bili-dyn-list__item:has(.bili-rich-text-module.goods) &#123; display: none !important &#125;”);<br>    if (!localStorage.WIDE_OPT_OUT) &#123;<br>        document.documentElement.setAttribute(‘wide’, ‘wide’);<br>    &#125;<br>    window.addEventListener(‘load’, function () &#123;<br>        const tabContainer &#x3D; document.querySelector(‘.bili-dyn-list-tabs__list’);<br>        const placeHolder &#x3D; document.createElement(‘div’);<br>        placeHolder.style.flex &#x3D; 1;<br>        const switchButton &#x3D; document.createElement(‘a’);<br>        switchButton.id &#x3D; ‘wide-mode-switch’;<br>        switchButton.className &#x3D; ‘bili-dyn-list-tabs__item’;<br>        switchButton.textContent &#x3D; ‘宽屏模式’;<br>        switchButton.addEventListener(‘click’, function (e) &#123;<br>            e.preventDefault();<br>            if (localStorage.WIDE_OPT_OUT) &#123;<br>                localStorage.removeItem(‘WIDE_OPT_OUT’);<br>                document.documentElement.setAttribute(‘wide’, ‘wide’);<br>            &#125; else &#123;<br>                localStorage.setItem(‘WIDE_OPT_OUT’, ‘1’);<br>                document.documentElement.removeAttribute(‘wide’);<br>            &#125;<br>        &#125;)<br>        tabContainer.appendChild(placeHolder);<br>        tabContainer.appendChild(switchButton);<br>    &#125;)<br>&#125;</p>
<p>&#x2F;&#x2F; 去广告<br>GM_addStyle(‘.ad-report, a[href*&#x3D;”cm.bilibili.com”] &#123; display: none !important; &#125;’);<br>if (unsafeWindow.<strong>INITIAL_STATE</strong>?.adData) &#123;<br>    for (const key in unsafeWindow.<strong>INITIAL_STATE</strong>.adData) &#123;<br>        if (!Array.isArray(unsafeWindow.<strong>INITIAL_STATE</strong>.adData[key])) continue;<br>        for (const item of unsafeWindow.<strong>INITIAL_STATE</strong>.adData[key]) &#123;<br>            item.name &#x3D; ‘B 站未来有可能会倒闭，但绝不会变质’;<br>            item.pic &#x3D; ‘<a href="https://static.hdslb.com/images/transparent.gif">https://static.hdslb.com/images/transparent.gif</a>‘;<br>            item.url &#x3D; ‘<a href="https://space.bilibili.com/208259">https://space.bilibili.com/208259</a>‘;<br>        &#125;<br>    &#125;<br>&#125;</p>
<p>&#x2F;&#x2F; 去充电列表（叔叔的跳过按钮越做越小了，就尼玛离谱）<br>if (unsafeWindow.<strong>INITIAL_STATE</strong>?.elecFullInfo) &#123;<br>    delete unsafeWindow.<strong>INITIAL_STATE</strong>.elecFullInfo;<br>&#125;</p>
<p>&#x2F;&#x2F; 修复文章区复制<br>if (location.href.startsWith(‘<a href="https://www.bilibili.com/read/cv">https://www.bilibili.com/read/cv</a>‘)) &#123;<br>    unsafeWindow.original.reprint &#x3D; “1”;<br>    document.querySelector(‘.article-holder’).classList.remove(“unable-reprint”);<br>    document.querySelector(‘.article-holder’).addEventListener(‘copy’, e &#x3D;&gt; e.stopImmediatePropagation(), true);<br>&#125;</p>
<p>&#x2F;&#x2F; 真·原画直播<br>if (location.href.startsWith(‘<a href="https://live.bilibili.com/">https://live.bilibili.com/</a>‘)) &#123;<br>    unsafeWindow.forceHighestQuality &#x3D; true;<br>    let recentErrors &#x3D; 0;<br>    setInterval(() &#x3D;&gt; recentErrors &gt; 0 ? recentErrors &#x2F; 2 : null, 10000);</p>
<pre><code>const oldFetch = unsafeWindow.fetch;
unsafeWindow.fetch = function (url) &#123;
    try &#123;
        const mcdnRegexp = /[xy0-9]+\.mcdn\.bilivideo\.cn:\d+/
        const qualityRegexp = /(live-bvc\/\d+\/live_\d+_\d+)_\w+/;
        if (mcdnRegexp.test(arguments[0]) &amp;&amp; unsafeWindow.disableMcdn) &#123;
            return Promise.reject();
        &#125;
        if (qualityRegexp.test(arguments[0]) &amp;&amp; unsafeWindow.forceHighestQuality) &#123;
            arguments[0] = arguments[0]
                .replace(qualityRegexp, &#39;$1&#39;)
                .replace(/(\d+)_(mini|pro)hevc/g, &#39;$1&#39;);
        &#125;
        const promise = oldFetch.apply(this, arguments);
        promise.then(response =&gt; &#123;
            if (!url.match(/\.(m3u8|m4s)/)) return;
            if ([403, 404].includes(response.status)) recentErrors++;
            if (recentErrors &gt;= 5 &amp;&amp; unsafeWindow.forceHighestQuality) &#123;
                recentErrors = 0;
                unsafeWindow.forceHighestQuality = false;
                GM_notification(&#123; title: &#39;最高清晰度可能不可用&#39;, text: &#39;已为您自动切换至播放器上选择的清晰度.&#39;, timeout: 3000, silent: true &#125;);
            &#125;
        &#125;);
        return promise;
    &#125; catch (e) &#123; &#125;
    return oldFetch.apply(this, arguments);
&#125;
</code></pre>
<p>}</p>
<p>&#x2F;&#x2F; 视频裁切<br>if (location.href.startsWith(‘<a href="https://www.bilibili.com/video/">https://www.bilibili.com/video/</a>‘)) {<br>    GM_addStyle(“body[video-fit] #bilibili-player video { object-fit: cover; } .bpx-player-ctrl-setting-fit-mode { display: flex;width: 100%;height: 32px;line-height: 32px; } .bpx-player-ctrl-setting-box .bui-panel-wrap, .bpx-player-ctrl-setting-box .bui-panel-item { min-height: 172px !important; }”);<br>    let timer;<br>    function toggleMode(enabled) {<br>        if (enabled) {<br>            document.body.setAttribute(‘video-fit’, ‘’);<br>        } else {<br>            document.body.removeAttribute(‘video-fit’);<br>        }<br>    }<br>    function injectButton() {<br>        if (!document.querySelector(‘.bpx-player-ctrl-setting-menu-left’)) {<br>            return;<br>        }<br>        clearInterval(timer);<br>        const parent &#x3D; document.querySelector(‘.bpx-player-ctrl-setting-menu-left’);<br>        const item &#x3D; document.createElement(‘div’);<br>        item.className &#x3D; ‘bpx-player-ctrl-setting-fit-mode bui bui-switch’;<br>        item.innerHTML &#x3D; ‘<input class="bui-switch-input" type="checkbox"><label class="bui-switch-label"><span class="bui-switch-name">裁切模式</span><span class="bui-switch-body"><span class="bui-switch-dot"><span></span></span></span></label>‘;<br>        parent.insertBefore(item, document.querySelector(‘.bpx-player-ctrl-setting-more’));<br>        document.querySelector(‘.bpx-player-ctrl-setting-fit-mode input’).addEventListener(‘change’, e &#x3D;&gt; toggleMode(e.target.checked));<br>        document.querySelector(‘.bpx-player-ctrl-setting-box .bui-panel-item’).style.height &#x3D; ‘’;<br>    }<br>    timer &#x3D; setInterval(injectButton, 200);<br>}</p>
<p>&#x2F;&#x2F; 去除地址栏多余参数<br>unsafeWindow.history.replaceState(undefined, undefined, removeTracking(location.href));<br>const pushState &#x3D; unsafeWindow.history.pushState;<br>unsafeWindow.history.pushState &#x3D; function (state, unused, url) {<br>    return pushState.apply(this, [state, unused, removeTracking(url)]);<br>}<br>const replaceState &#x3D; unsafeWindow.history.replaceState;<br>unsafeWindow.history.replaceState &#x3D; function (state, unused, url) {<br>    return replaceState.apply(this, [state, unused, removeTracking(url)]);<br>}</p>
<p>function removeTracking(url) {<br>    if (!url) return url;<br>    try {<br>        const [base, search] &#x3D; url.split(‘?’);<br>        if (!search) return url;<br>        const searchParams &#x3D; new URLSearchParams(‘?’ + search);<br>        const keys &#x3D; Array.from(searchParams.keys());<br>        for (const key of keys) {<br>            uselessUrlParams.forEach(item &#x3D;&gt; {<br>                if (typeof item &#x3D;&#x3D;&#x3D; ‘string’) {<br>                    if (item &#x3D;&#x3D;&#x3D; key) searchParams.delete(key);<br>                } else if (item instanceof RegExp) {<br>                    if (item.test(key)) searchParams.delete(key);<br>                }<br>            });<br>        }<br>        if (location.pathname &#x3D;&#x3D;&#x3D; base &amp;&amp; !searchParams.size) return;<br>        return [base, searchParams.toString()].filter(Boolean).join(‘?’);<br>    } catch (e) {<br>        return url;<br>    }<br>}</p>
<p>&#x2F;&#x2F; 去掉 B 站的傻逼上报<br>!function () {<br>    const oldFetch &#x3D; unsafeWindow.fetch;<br>    unsafeWindow.fetch &#x3D; function (url) {<br>        if (typeof url &#x3D;&#x3D;&#x3D; ‘string’ &amp;&amp; url.includes(‘data.bilibili.com’))<br>            return Promise.resolve(new Response());<br>        return oldFetch.apply(this, arguments);<br>    }<br>    const oldSend &#x3D; unsafeWindow.XMLHttpRequest.prototype.open;<br>    unsafeWindow.XMLHttpRequest.prototype.open &#x3D; function (method, url) {<br>        if (typeof url &#x3D;&#x3D;&#x3D; ‘string’ &amp;&amp; url.includes(‘data.bilibili.com’)) {<br>            this.send &#x3D; function () { };<br>            return;<br>        }<br>        return oldSend.apply(this, arguments);<br>    }<br>    unsafeWindow.navigator.sendBeacon &#x3D; () &#x3D;&gt; Promise.resolve();</p>
<pre><code>unsafeWindow.MReporter = function () &#123; &#125;;
unsafeWindow.MReporter.appear = function () &#123; &#125;;
unsafeWindow.MReporter.click = function () &#123; &#125;;
unsafeWindow.MReporter.tech = function () &#123; &#125;;
unsafeWindow.MReporter.pv = function () &#123; &#125;;
unsafeWindow.MReporter.import = &#123; auto() &#123; &#125; &#125;;

const sentryHub = class &#123; bindClient() &#123; &#125; &#125;
const fakeSentry = &#123;
    SDK_NAME: &#39;sentry.javascript.browser&#39;,
    SDK_VERSION: &#39;0.0.0&#39;,
    BrowserClient: class &#123; &#125;,
    Hub: sentryHub,
    Integrations: &#123;
        Vue: class &#123; &#125;,
        GlobalHandlers: class &#123; &#125;,
        InboundFilters: class &#123; &#125;,
    &#125;,
    init() &#123; &#125;,
    configureScope() &#123; &#125;,
    getCurrentHub: () =&gt; new sentryHub(),
    setContext() &#123; &#125;,
    setExtra() &#123; &#125;,
    setExtras() &#123; &#125;,
    setTag() &#123; &#125;,
    setTags() &#123; &#125;,
    setUser() &#123; &#125;,
    wrap() &#123; &#125;,
&#125;
if (!unsafeWindow.Sentry || unsafeWindow.Sentry.SDK_VERSION !== fakeSentry.SDK_VERSION) &#123;
    if (unsafeWindow.Sentry) &#123; delete unsafeWindow.Sentry &#125;
    Object.defineProperty(unsafeWindow, &#39;Sentry&#39;, &#123; value: fakeSentry, enumerable: false, writable: false &#125;);
&#125;
Object.defineProperty(unsafeWindow, &#39;ReporterPb&#39;, &#123; value: class &#123; click() &#123; &#125; custom() &#123; &#125; exposure() &#123; &#125; report() &#123; &#125; tech() &#123; &#125; pv() &#123; &#125; &#125;, enumerable: false, writable: false &#125;);

Object.defineProperty(unsafeWindow, &#39;__biliUserFp__&#39;, &#123;
    get() &#123; return &#123; init() &#123; &#125;, queryUserLog() &#123; return [] &#125; &#125; &#125;,
    set() &#123; &#125;,
&#125;);
Object.defineProperty(unsafeWindow, &#39;__USER_FP_CONFIG__&#39;, &#123; get() &#123; return undefined &#125;, set() &#123; &#125; &#125;);
Object.defineProperty(unsafeWindow, &#39;__MIRROR_CONFIG__&#39;, &#123; get() &#123; return undefined &#125;, set() &#123; &#125; &#125;);
</code></pre>
<p>}()<br>  </code></pre></p>
</details>

<p>大家可以去看看<a href="https://mymuwu.net/?p=1427">大佬文章的说明</a>，我这就不贴了</p>
]]></content>
      <tags>
        <tag>OpenClash</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建越狱软件源</title>
    <url>/2024/09/15/%E6%90%AD%E5%BB%BA%E8%B6%8A%E7%8B%B1%E8%BD%AF%E4%BB%B6%E6%BA%90/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近一直在折腾越狱，手机移除越狱了几次，发现重新安装插件的过程非常麻烦，所以想搭建一个自己的软件源<span id="more"></span>，里面的插件都是我需要，这样更加省事。</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>使用 GitHub Pages 来搭建，创建好<code>（用户名）.github.io</code> 的项目</p>
<p>环境：</p>
<ul>
<li><p>iPhone OS（已越狱）：自带dpkg-deb命令，无dpkg-scanpackages命令</p>
<p>看<a href="https://www.feng.com/post/13849351">威锋的教程</a>，安装好下面的插件就没问题了</p>
<p><code>dpkg、dpkg-dev、dpkg-repack、libdpkq-dev、libdpkg-perl</code></p>
</li>
<li><p>Debian&#x2F;Ubuntu：自带dpkg-deb和dpkg-scanpackages命令</p>
</li>
<li><p>Mac OS X：<code>brew install dpkg</code></p>
</li>
<li><p>Windows：非unix系统，无dpkg相关命令，可以安装虚拟机</p>
</li>
</ul>
<p>插件来源：</p>
<ol>
<li><p>Telegram、QQ等社交软件</p>
</li>
<li><p>赵楠的插件<code>Give me deb</code>会把我们在插件商店下载的插件保存deb在</p>
<p><code>/var/mobile/Downloads/dpkg_triggered</code></p>
</li>
<li><p><a href="https://www.postbox.news/">PostBox</a> 应用内 .deb 下载和提取，需巨魔安装</p>
</li>
</ol>
<h1 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h1><h2 id="创建-Release-文件，基本格式如下："><a href="#创建-Release-文件，基本格式如下：" class="headerlink" title="创建 Release 文件，基本格式如下："></a>创建 Release 文件，基本格式如下：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Origin: 软件源名称，可以使用中文（Cydia的软件源列表中显示的标题）</span><br><span class="line">Label:  同上，也可以使用中文</span><br><span class="line">Suite: 软件源的类型，比如正式源，测试源等，可以分别用stable, beta, unstable等来表示，一般填stable就行</span><br><span class="line">Version: 版本号，这个其实不重要，随便填，一般都是写1.0</span><br><span class="line">Codename: 代码代号，这个是随意的，只是一个标识，但它必须是英文</span><br><span class="line">Architectures: 架构，iphoneos-arm iphoneos-arm64 iphoneos-arm64e，根据自己的需求可单个或者多个填写</span><br><span class="line">Components: main</span><br><span class="line">Description: 软件源介绍，可以使用中文和html代码</span><br></pre></td></tr></table></figure>

<p><strong>可选（可直接略过）：</strong></p>
<p><strong>Support</strong>: 支持，没什么作用，除非特别需要，否则可以不要这个</p>
<p><strong>MD5Sum</strong>: 不是必须的，但如果Packages文件位置丌不Release文件在同一目录下，则必须有此项。另外，如果需要签名Release文件，也必须有这个</p>
<h2 id="打包插件"><a href="#打包插件" class="headerlink" title="打包插件"></a>打包插件</h2><p>文件的基本目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- Cydia</span><br><span class="line">    |- CydiaIcon.png                    源图标</span><br><span class="line">    |- Release                          描述源信息</span><br><span class="line">    |- debs                             插件</span><br><span class="line">        |- xx.deb</span><br><span class="line">        |- xxx.deb</span><br></pre></td></tr></table></figure>

<p>使用 <code>Terminal</code> 打开所在文件夹</p>
<p>将位于debs目录的所有deb包扫描并生成Packages</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg-scanpackages debs /dev/null &gt; Packages</span><br><span class="line"></span><br><span class="line">同一插件多个版本请使用</span><br><span class="line">dpkg-scanpackages -m debs/ &gt; Packages</span><br></pre></td></tr></table></figure>

<p>可选：生成客户端可能需要的gz和bz2压缩的Packages</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gzip -c Packages &gt; Packages.gz</span><br><span class="line">bzip2 -k Packages</span><br></pre></td></tr></table></figure>

<p>为什么需要压缩文件？</p>
<p>Cydia添加源时大致行为如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">发送HEAD请求，检测/Packages.xz是否存在</span><br><span class="line">发送HEAD请求，检测/Packages.gz是否存在</span><br><span class="line">发送HEAD请求，检测/Packages.bz2是否存在</span><br><span class="line">发送HEAD请求，检测/Packages.lzma是否存在</span><br><span class="line">发送HEAD请求，检测/Packages是否存在</span><br><span class="line">如果上述请求成功，则GET请求对应Packages(注1)，从Pacakges获取软件列表并缓存</span><br><span class="line">如果上述请求均不成功，则显示失败，源内空空如也</span><br><span class="line">安装软件时，从Pacakges中提取软件的下载地址下载  </span><br></pre></td></tr></table></figure>

<p>从过程可以看出 Cydia 优先读取压缩格式的 Packages，某些源的软件比较多时，Packages 文件本身会达到十几到几十MB，因此支持压缩文件传输是很必要的</p>
<h2 id="上传到-GitHub-项目中"><a href="#上传到-GitHub-项目中" class="headerlink" title="上传到 GitHub 项目中"></a>上传到 GitHub 项目中</h2><p>可以使用 git ，不会的就手动上传吧</p>
<h2 id="后期维护"><a href="#后期维护" class="headerlink" title="后期维护"></a>后期维护</h2><p>后面有新插件时，可以在 debs 文件夹里面，只放自己要新添加的插件，然后生成 Packages ，把信息手动添加到 GitHub项目的文件中，这样就不会改掉我们自定义的插件描述了</p>
<h2 id="修改插件版本"><a href="#修改插件版本" class="headerlink" title="修改插件版本"></a>修改插件版本</h2><p>用途：想使用老版本的插件，但是不想让 插件管理器的“更新”页面一直显示有更新，Sileo 没有屏蔽更新的选项，Saily 倒是有屏蔽更新的功能，有些垃圾源倒是会通过修改版本号，来让用户安装自己源的插件</p>
<p>Packages 实质上是deb文件的 control 信息集合，另外多了deb文件本身的信息。（control文件是记录软件包的信息，但没有deb文件本身）</p>
<p>所以我们只需要把插件 control 对应的版本信息给修改了，这样就可以实现修改版本号了。</p>
<p>步骤：</p>
<p>使用Filza 解压自己想修改的插件，在 DEBIAN 文件夹里面找到 control 文件，使用文本编辑器打开，修改 Package 后面的值，避免与源作者冲突导致，改了 Package，Version的值改不改都行，记得在 Description（描述）中注明有修改，然后长按解压出来的主文件夹，点击“打包deb”，就成功了</p>
<p>Description 可以在生成的 Packages 中修改，Package、Version，必须解压修改</p>
<h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>附上我的源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tuneu.github.io</span><br></pre></td></tr></table></figure>



<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol>
<li><a href="https://idayer.com/how-to-host-a-cydia-repository/">https://idayer.com/how-to-host-a-cydia-repository/</a></li>
<li><a href="https://www.bilibili.com/read/cv10439805/">https://www.bilibili.com/read/cv10439805/</a></li>
<li><a href="https://www.feng.com/post/13849351">https://www.feng.com/post/13849351</a></li>
<li><a href="https://blog.bombox.org/2019-10-10/make-cydia-source/">https://blog.bombox.org/2019-10-10/make-cydia-source/</a></li>
<li><a href="https://www.saurik.com/packaging.html">https://www.saurik.com/packaging.html</a></li>
<li><a href="https://www.0xaa55.com/thread-26544-1-1.html">https://www.0xaa55.com/thread-26544-1-1.html</a></li>
<li><a href="https://www.youtube.com/watch?v=9eHKvCqBDBQ">https://www.youtube.com/watch?v=9eHKvCqBDBQ</a></li>
</ol>
]]></content>
      <tags>
        <tag>越狱</tag>
      </tags>
  </entry>
  <entry>
    <title>编译OpenWrt</title>
    <url>/2024/06/22/%E7%BC%96%E8%AF%91OpenWrt/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>网上有大量的OpenWrt固件供用户下载使用。这类固件旨在满足广泛用户群体的需求，因此可能包含了一些并非所有用户都会用到的功能或组件。<span id="more"></span>此外，考虑到最近曝光的XZ后门事件，这让人们更加警惕第三方编译固件的安全性，毕竟无法完全确信他人编译的固件是否完全安全无虞。因此，为了确保设备的安全性和个性化需求，自行编译适合自己使用的OpenWrt固件不失为一个更为可靠的选择。</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol>
<li><p><strong>Linux系统，这里使用 Ubuntu 20.04 LTS x64</strong></p>
<p>VMware安装 Ubuntu</p>
<p>创建虚拟机：</p>
<p>兼容模式自选；</p>
<p>稍后安装操作系统（之后用ISO安装）；</p>
<p>Linux–Ubuntu 64位；</p>
<p>磁盘 80~100 GB，拆分成多个文件；</p>
<p>自定义硬件注意：</p>
<p>​         网络选桥接，便于 ssh，处理器只要总线程少于自己电脑的线程就可以，看看<a href="https://blog.csdn.net/p1279030826/article/details/103044840">这篇CSDN</a></p>
<p>在虚拟机设置-CD&#x2F;DVD里面-选择下载好的Ubuntu镜像</p>
<p>启动虚拟机开始安装Ubuntu</p>
<p>时区选上海Shanghai 其他没什么</p>
</li>
<li><p><strong>源码选择</strong></p>
<ol>
<li><p><a href="https://github.com/coolsnowwolf/lede">LEDE</a></p>
<p>缺乏我所需的一些功能，由于使用人数众多，项目的开发重点往往是保持代码的稳定性</p>
</li>
<li><p><a href="https://github.com/Lienol/openwrt">Lienol</a></p>
<p>与我所编译的插件冲突，导致一直编译失败</p>
</li>
<li><p><a href="https://github.com/immortalwrt/immortalwrt">ImmortalWrt</a>（推荐）</p>
<p>官方的软件源维护很好，体验无限接近主线的一个OpenWrt分支&#x2F;变体，主要针对墙内用户体验做了很多工作。</p>
</li>
<li><p><a href="https://github.com/openwrt/openwrt">OpenWrt官方</a></p>
<p>精简干净</p>
</li>
</ol>
</li>
</ol>
<h1 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h1><p>Ubuntu 全局上网，不要使用 root 用户编译</p>
<h2 id="更新包索引文件、安装新版本包"><a href="#更新包索引文件、安装新版本包" class="headerlink" title="更新包索引文件、安装新版本包"></a>更新包索引文件、安装新版本包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update -y</span><br><span class="line">sudo apt full-upgrade -y</span><br></pre></td></tr></table></figure>

<h2 id="安装依赖："><a href="#安装依赖：" class="headerlink" title="安装依赖："></a>安装依赖：</h2><p>下面的是 ImmortalWrt 的，比LEDE的全</p>
<p>不要使用 ImmortalWrt 项目里面的一键脚本，会把 Ubuntu 的软件源改成华为的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \</span><br><span class="line">  bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \</span><br><span class="line">  g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \</span><br><span class="line">  libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 \</span><br><span class="line">  libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lld llvm lrzsz mkisofs msmtp \</span><br><span class="line">  nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip python3-ply \</span><br><span class="line">  python3-docutils python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig \</span><br><span class="line">  texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd</span><br></pre></td></tr></table></figure>

<h2 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b &lt;branch&gt; --single-branch --filter=blob:none https://github.com/immortalwrt/immortalwrt</span><br></pre></td></tr></table></figure>

<p>示例：下载 21.02 版本（iptables 最后一版）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b openwrt-23.05  --single-branch --filter=blob:none https://github.com/immortalwrt/immortalwrt</span><br></pre></td></tr></table></figure>

<p>进入 immortalwrt 文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd immortalwrt</span><br></pre></td></tr></table></figure>

<h2 id="缝合一些其他插件"><a href="#缝合一些其他插件" class="headerlink" title="缝合一些其他插件"></a>缝合一些其他插件</h2><p>按照下面格式添加到根目录 feeds.conf.default 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">src-git &lt;文件夹名，不要重复&gt; https://xx.xx/xxx</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- [fw876/helloworld](https://github.com/fw876/helloworld) 科学上网插件集</span><br><span class="line">- 来自神秘网友 kenzok8（ssrp、passwall、openclash 等）</span><br><span class="line">  * [kenzok8/openwrt-packages](https://github.com/kenzok8/openwrt-packages)</span><br><span class="line">  * [kenzok8/small](https://github.com/kenzok8/small)</span><br><span class="line">  * [kenzok8/small-package](https://github.com/kenzok8/small-package) 最新源</span><br></pre></td></tr></table></figure>

<h2 id="添加后执行以下命令下载安装软件"><a href="#添加后执行以下命令下载安装软件" class="headerlink" title="添加后执行以下命令下载安装软件"></a>添加后执行以下命令下载安装软件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./scripts/feeds update -a</span><br></pre></td></tr></table></figure>

<p>创建软链接到 package&#x2F;feeds 目录（package目录下的软件会被 make menuconfig 识别）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./scripts/feeds install -a</span><br></pre></td></tr></table></figure>

<p>[.&#x2F;scripts&#x2F;feeds 的用法见此处](# .&#x2F;scripts&#x2F;feeds 的用法)</p>
<h2 id="添加-Mosdns-源码"><a href="#添加-Mosdns-源码" class="headerlink" title="添加 Mosdns 源码"></a>添加 Mosdns 源码</h2><p><a href="https://github.com/sbwml/luci-app-mosdns">GitHub项目</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    # （OpenWrt-21.02 及更旧版本）更新golang 1.20.x 或最新版本</span><br><span class="line">rm -rf feeds/packages/lang/golang</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/sbwml/packages_lang_golang -b 20.x feeds/packages/lang/golang</span><br><span class="line">    </span><br><span class="line">    # (openwrt-22.03 &amp; master)remove v2ray-geodata package from feeds </span><br><span class="line">rm -rf feeds/packages/net/v2ray-geodata</span><br><span class="line">git clone https://github.com/sbwml/luci-app-mosdns -b v5 package/mosdns</span><br><span class="line">git clone https://github.com/sbwml/v2ray-geodata package/v2ray-geodata</span><br></pre></td></tr></table></figure>


<h2 id="图形化配置OpenWRT组件：-翻译见此处-编译配置选项翻译"><a href="#图形化配置OpenWRT组件：-翻译见此处-编译配置选项翻译" class="headerlink" title="图形化配置OpenWRT组件：[翻译见此处](# 编译配置选项翻译)"></a>图形化配置OpenWRT组件：[翻译见此处](# 编译配置选项翻译)</h2><p>[注意] 执行下述命令启动图形化配置界面之前，把“终端”命令行窗口最大化。如果窗口太小可能会导致启动失败！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>


<p>*表示编译进固件里面      M表示只编译但不写到固件里面去         （空） 留空表示不做任何操作</p>
<p><strong>Target Images（目标系统）</strong></p>
<p>ext4，efi不要，vmdk 安装到VMware用</p>
<p>squashfs镜像不支持扩展</p>
<p>谨慎使用带有rootfs的镜像，没有引导，需要自己折腾</p>
<p>(16) Kernel partition size (in MB) </p>
<p>(400) Root filesystem partition size (in MB) </p>
<p><strong>Base system（基本系统）</strong></p>
<p>dnsmasq-full—&gt; 选满（HAVE不选）, 取消dnsmasq, dnsmasq-dhcpv6两个选项，否则编译会出差！！！</p>
<p>下翻选firewall4   不选firewall。</p>
<p><strong>Extra packages （额外包）</strong></p>
<p>autocore        选</p>
<p>automount      不     USB 文件共享</p>
<p>autoautosamba  不     Samba 多媒体共享</p>
<p>ipv6helper       IPV6选</p>
<p><strong>Kernel modules（内核模块）</strong></p>
<p>Network Devices</p>
<p>只留了e1000、ifb （虚拟网卡，记得eqos、qos采用的就是这个，方便对同一网口进行上下行限速）、igc(i225) 、macvlan、vmxnet3  (有一些把USB去掉之后可以取消)</p>
<p>Network Support——kmod-tun 选（openclash依赖，最后确认一下，可能会被自动取消掉）</p>
<p>SPI &#x2F; Sound &#x2F; USB &#x2F;Video Support &#x2F; Wireless Drivers都可以取消</p>
<p><strong>Network</strong></p>
<p>——odhcp6c和odhcpd-ipv6only（这两个应该会自动选上）IPv6选</p>
<p>—&gt;Firewall —&gt; ip6tables-extra 和 ip6tables-mod-nat   IPv6选</p>
<p>—&gt;SSH—&gt; openssh-sftp-server   选  我不选这个无法ssh连接，后面也可以加上</p>
<p><strong>LuCI</strong></p>
<p>—&gt; Collections—&gt; luci  选</p>
<p>—&gt; Modules —&gt;Translations记得选简中</p>
<p>​               luci-compat 选（OpenClash依赖）</p>
<p>—&gt;Applications —-根据自己的需求来选择（第一次编译少选一些，passwall的配置用动，我这很容易报错），可以看看<a href="https://www.right.com.cn/forum/thread-3682029-1-1.html">恩山的帖子</a></p>
<pre><code>   这几个比较绕
   上网时间控制：luci-app-timecontrol
   访问限制：luci-app-control-webrestriction
   网址过滤：luci-app-control-weburl
   定时唤醒：luci-app-control-timewol
</code></pre>
<p>—&gt;Themes—&gt;luci-theme-argon 选</p>
<p>保存并退出到 Terminal</p>
<h2 id="下载-dl-库，开始编译固件"><a href="#下载-dl-库，开始编译固件" class="headerlink" title="下载 dl 库，开始编译固件"></a>下载 dl 库，开始编译固件</h2><p>-j 后面是线程数，<strong>第一次</strong>编译推荐用<strong>单线程</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make download -j8 V=s</span><br><span class="line"></span><br><span class="line">make V=s -j1</span><br></pre></td></tr></table></figure>

<p>弄完就可以去睡觉了，大概需要六、七个小时</p>
<p>编译输出路径：<code> /bin/targets</code></p>
<h2 id="二次编译（适用于不更改配置功能和插件，仅升级）"><a href="#二次编译（适用于不更改配置功能和插件，仅升级）" class="headerlink" title="二次编译（适用于不更改配置功能和插件，仅升级）"></a>二次编译（适用于不更改配置功能和插件，仅升级）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> immortalwrt</span><br><span class="line"></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make defconfig</span><br><span class="line"></span><br><span class="line">make download -j8 V=s</span><br><span class="line"></span><br><span class="line">make V=s -j$(<span class="built_in">nproc</span>)</span><br></pre></td></tr></table></figure>

<h1 id="杂技巧"><a href="#杂技巧" class="headerlink" title="杂技巧"></a>杂技巧</h1><h2 id="一些配置"><a href="#一些配置" class="headerlink" title="一些配置"></a>一些配置</h2><ol>
<li><p><strong>更改LAN口的默认IP地址</strong><br> <code>package/base-files/files/bin/config_generate</code> 165 行</p>
</li>
<li><p><strong>修改默认主题为 argone（ImmortalWrt不用改）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/luci-theme-bootstrap/luci-theme-argone/g&#x27; feeds/luci/collections/luci/Makefile</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>更改 固件版本信息</strong></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &quot;s/OpenWrt /$(date +%Y.%m.%d) 2022/xx/xx /g&quot; package/lean/default-settings/files/zzz-default-settings</span><br></pre></td></tr></table></figure>

</li>
<li><p><strong>添加自定义插件</strong></p>
<p>原理是把插件源码放到 package 目录下，编译时会自动遍历</p>
<p>示例：</p>
<p>- 安装最新 <a href="https://github.com/jerrykuku/luci-theme-argon/">argon</a> 主题  # openwrt 源码</p>
<p>  cd package</p>
<p>  git clone <a href="https://github.com/jerrykuku/luci-theme-argon.git">https://github.com/jerrykuku/luci-theme-argon.git</a>    # Lean 源码</p>
<p>  cd &#x2F;package&#x2F;feeds&#x2F;luci</p>
<p>  rm -rf luci-theme-argon</p>
<p>  git clone -b 18.06 <a href="https://github.com/jerrykuku/luci-theme-argon.git">https://github.com/jerrykuku/luci-theme-argon.git</a></p>
</li>
<li><p><strong>修改 SSH 登陆欢迎信息</strong></p>
<p>修改文件<code>/package/base-files/files/etc/banner</code></p>
<p>可以在<a href="http://patorjk.com/software/taag/">此处</a>定制自己的样式</p>
</li>
</ol>
<h2 id="如果编译OpenWrt原版"><a href="#如果编译OpenWrt原版" class="headerlink" title="如果编译OpenWrt原版"></a>如果编译OpenWrt原版</h2><p>切换最新稳定分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line">git checkout v22.03</span><br></pre></td></tr></table></figure>

<p>[说明] 这一步很重要，切换稳定分支，编译的版本是经过充分验证的稳定版本，不容易出现莫名其妙的bug, 减少很多白折腾。切身教训，供参考。</p>
<h2 id="管理-Web-管理上面-APP-出现的菜单位置"><a href="#管理-Web-管理上面-APP-出现的菜单位置" class="headerlink" title="管理 Web 管理上面 APP 出现的菜单位置()"></a>管理 Web 管理上面 APP 出现的菜单位置()</h2><p>比如把一个出现在“服务”菜单里的app改到“网络”里，以NFT-QOS为例：</p>
<p>进入package下面的luci-app-nft-qos&#x2F;controller,看到nft-qos.lua文件，打开看到：</p>
<p>entry({“admin”, “services”, “nft-qos”}, cbi(“nft-qos&#x2F;nft-qos”),</p>
<p>上面的”services”就是“服务”，修改为”network”,这个app就会改变到“网络”菜单里了。</p>
<p>———某些比较复杂关系的app只修改这一处会无法运行，是因为多个函数使用了这个路径，需要逐一修改。luasrc下面所有文件都要打开查找一遍，凡是存在“services”这个一路径的（或者是admin&#x2F;services&#x2F;xxx这样的路径的），通通需要替换成“network”才算完成。</p>
<p>lean的defaultsetting有这些lua重分配命令，但是同样存在上面的问题，所以必须从源码本身去修改。</p>
<h2 id="MentoHUST（锐捷认证）"><a href="#MentoHUST（锐捷认证）" class="headerlink" title="MentoHUST（锐捷认证）"></a>MentoHUST（锐捷认证）</h2><p><a href="https://github.com/sbwml/luci-app-mentohust/releases/tag/v0.3.1">用这个GitHub的</a></p>
<p>文件主体可以用GitHub的，luci用immortalwrt可以完美使用</p>
<h2 id="重新编译"><a href="#重新编译" class="headerlink" title="重新编译"></a>重新编译</h2><p><code>make clean</code>   仅仅是清除之前编译的可执行文件及配置文件，比如bin路径下面的文件，config配置文件不会清除。</p>
<p><code>make distclean</code>  清除所有生成的文件，连feeds也会干掉，只留下git clone完成时候的初始状态。</p>
<h2 id="更改openwrt后台web登陆用户名方法"><a href="#更改openwrt后台web登陆用户名方法" class="headerlink" title="更改openwrt后台web登陆用户名方法"></a>更改openwrt后台web登陆用户名方法</h2><p>修改&#x2F;etc&#x2F;passwd</p>
<p>将<code>root:x:0:0:root:/root:/bin/ash</code>修改为<code>username:x:0:0:root:/root:/bin/ash</code></p>
<h2 id="限速的配置"><a href="#限速的配置" class="headerlink" title="限速的配置"></a>限速的配置</h2><p>详见<a href="https://www.right.com.cn/forum/thread-8292547-1-1.html">恩山的帖子</a></p>
<p>最好有以下依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tc-tiny                                      重要</span><br><span class="line">kmod-sched-core                      tc 限速核心</span><br><span class="line">kmod-sched                             tc sfq 随机公平排队 相关 ，查看固件是否支持sfq ，终端命令：opkg files kmod-sched|grep sfq</span><br><span class="line">kmod-sched-cake                     流量智能队列管理（QOS）</span><br><span class="line">kmod-ifb                                 虚拟网卡，记得eqos、qos采用的就是这个，方便对同一网口进行上下行限速</span><br><span class="line">iptables-mod-iprange                对IP段进行筛选(过滤)</span><br><span class="line">iptables-mod-nat-extra              流量智能队列管理（QOS）</span><br><span class="line">kmod-sched-connmark</span><br><span class="line">kmod-sched-ipset</span><br><span class="line">        以前整理过，丢了，有些我也忘记用途了，编译的时候尽量都打上，以后报错的时候原因不好找。</span><br></pre></td></tr></table></figure>



<h2 id="编译配置选项翻译"><a href="#编译配置选项翻译" class="headerlink" title="编译配置选项翻译"></a>编译配置选项翻译</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OpenWrtConfiguration【OpenWrt配置】</span><br><span class="line">TargetSystem () ---&gt; 目标系统（）</span><br><span class="line">Subtarget() ---&gt; 子目标（）</span><br><span class="line">TargetProfile () ---&gt;目标配置文件（通用）</span><br><span class="line">TargetImages ---&gt; 保存目标镜像的格式</span><br><span class="line">Enableexperimental features by default ---&gt; 默认情况下启用实验功能</span><br><span class="line">Globalbuild settings ---&gt; 全局构建设置</span><br><span class="line">Advancedconfiguration options (for developers) ---- 高级配置选项（适用于开发人员）</span><br><span class="line">Buildthe OpenWrt Image Builder 构建OpenWrt图像生成器</span><br><span class="line">Buildthe OpenWrt SDK构建OpenWrt SDK</span><br><span class="line">Packagethe OpenWrt-based Toolchain打包基于OpenWrt的工具链</span><br><span class="line">Imageconfiguration ---&gt;图像配置</span><br><span class="line">Basesystem ---&gt; 基本系统</span><br><span class="line">Administration---&gt; 管理</span><br><span class="line">BootLoaders ---&gt;引导加载程序</span><br><span class="line">Development---&gt; 开发</span><br><span class="line">Extrapackages ---&gt; 额外包</span><br><span class="line">Firmware---&gt;固件</span><br><span class="line">Fonts---&gt;字体</span><br><span class="line">Kernelmodules ---&gt; 内核模块</span><br><span class="line">Languages---&gt;语言</span><br><span class="line">Libraries---&gt; 图书馆</span><br><span class="line">LuCI---&gt; LuCI 软件包</span><br><span class="line">Mail---&gt;邮件</span><br><span class="line">Multimedia---&gt;多媒体</span><br><span class="line">Network---&gt;网络</span><br><span class="line">Sound---&gt; 声音</span><br><span class="line">Utilities---&gt;实用程序</span><br><span class="line">Xorg---&gt;Xorg</span><br></pre></td></tr></table></figure>

<h2 id="scripts-feeds-的用法"><a href="#scripts-feeds-的用法" class="headerlink" title=".&#x2F;scripts&#x2F;feeds 的用法"></a>.&#x2F;scripts&#x2F;feeds 的用法</h2><p>更新包列表：<code>./scripts/feeds update -a</code><br>集成到menuconfig：<code>./scripts/feeds install -a</code></p>
<p>此外可以直接输入<code>./scripts/feeds</code>查看其用法，下面简略翻译了一下用法（水平有限，若有错误欢迎指正）：</p>
<p>用法: <code>./scripts/feeds &lt;命令&gt; [参数]</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令:</span><br><span class="line">list [参数]: 列出所有源及其内容和修订版本(如果已经安装)</span><br><span class="line">参数:</span><br><span class="line">-s :            源名称及其URL列表.</span><br><span class="line">-r &lt;源名称&gt;:    特定源提供的包列表.</span><br><span class="line">-d &lt;分隔符&gt;:    指定区分不同行的分隔符 (默认: 空格)</span><br><span class="line">install [参数] &lt;包&gt;: 安装一个包</span><br><span class="line">参数:</span><br><span class="line">-a :            安装所有源提供的包或者特定源提供的包(使用-p参数).</span><br><span class="line">-p &lt;源名称&gt;:    指定安装包的时候要使用的源.</span><br><span class="line">-d &lt;y|m|n&gt;:     为新安装的软件包设置默认值.</span><br><span class="line">search [参数] &lt;子字符串&gt;: 搜索一个包</span><br><span class="line">参数:</span><br><span class="line">-r &lt;源名称&gt;:    只从该源搜索</span><br><span class="line">uninstall -a|&lt;包&gt;: 卸载一个包</span><br><span class="line">参数:</span><br><span class="line">-a :            卸载所有包.</span><br><span class="line">update -a|&lt;源名(一个或多个)&gt;: 更新文件feeds.conf里的源提供的包列表.</span><br><span class="line">参数:</span><br><span class="line">-a :            更新feeds.conf里所有源提供的包列表. 否则只更新特定源的.</span><br><span class="line">-i :            只重建索引列表. 不升级源.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>从2024年6月22日一直到7月2日，我尝试编译了多种不同的源码，有的编译失败，有的则无法满足我的需求，迄今为止最为折腾的经历</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol>
<li><a href="https://github.com/immortalwrt/immortalwrt">https://github.com/immortalwrt/immortalwrt</a></li>
<li><a href="https://github.com/coolsnowwolf/lede">https://github.com/coolsnowwolf/lede</a></li>
<li><a href="https://github.com/Lienol/openwrt">https://github.com/Lienol/openwrt</a></li>
<li><a href="https://shimo.im/docs/gYjt9QVr8T9Vhv9X/read">https://shimo.im/docs/gYjt9QVr8T9Vhv9X/read</a></li>
<li><a href="https://www.cnblogs.com/kn-zheng/p/17340151.html">https://www.cnblogs.com/kn-zheng/p/17340151.html</a></li>
<li><a href="https://www.right.com.cn/forum/thread-3682029-1-1.html">https://www.right.com.cn/forum/thread-3682029-1-1.html</a></li>
<li><a href="https://sspai.com/post/61463">https://sspai.com/post/61463</a></li>
<li><a href="https://www.cnblogs.com/kn-zheng/p/17340776.html">https://www.cnblogs.com/kn-zheng/p/17340776.html</a></li>
<li><a href="https://www.right.com.cn/forum/thread-469400-1-1.html">https://www.right.com.cn/forum/thread-469400-1-1.html</a></li>
<li><a href="https://eagmi.com/categories/openwrt%E7%B3%BB%E5%88%97/">https://eagmi.com/categories/openwrt%E7%B3%BB%E5%88%97/</a></li>
<li><a href="https://github.com/immortalwrt/immortalwrt/discussions/1109">https://github.com/immortalwrt/immortalwrt/discussions/1109</a></li>
</ol>
]]></content>
      <tags>
        <tag>OpenWrt</tag>
      </tags>
  </entry>
  <entry>
    <title>青龙面板保活Serv00并启用TG推送</title>
    <url>/2024/08/01/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF%E4%BF%9D%E6%B4%BBServ00%E5%B9%B6%E5%90%AF%E7%94%A8TG%E6%8E%A8%E9%80%81/</url>
    <content><![CDATA[<p>网上有很多使用GitHub Actions来保号的教程，关于青龙面板的很少，所以自己研究了一下，下面是我的方案。<span id="more"></span>如有不当之处，欢迎大家批评指正。注意，此方法有点毛病，<a href="#%E4%BB%A5%E4%B8%8A%E4%BB%A3%E7%A0%81%E4%B8%80%E4%BA%9B%E5%8F%82%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8">请见此处</a></p>
<h1 id="安装sshpass依赖和jq"><a href="#安装sshpass依赖和jq" class="headerlink" title="安装sshpass依赖和jq"></a>安装sshpass依赖和jq</h1><p>青龙面板—依赖管理—Linux—添加<code>sshpass</code>和<code>jq</code><br>sshpass的使用可以见<a href="https://linux.cn/article-8086-1.html">这篇文章</a></p>
<h1 id="添加脚本-24-8-3-更新脚本"><a href="#添加脚本-24-8-3-更新脚本" class="headerlink" title="添加脚本 24.8.3 更新脚本"></a><del>添加脚本</del> <a href="#%E6%9B%B4%E6%96%B0%E8%84%9A%E6%9C%AC">24.8.3 更新脚本</a></h1><p>青龙面板—脚本管理—添加sh脚本<br>以下脚本是GPT写的多账号脚本，（第二次感受到生成式AI的便利，第一次是写openclah的防火墙规则）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;开始执行任务...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行远程命令并将输出存储在变量中</span></span><br><span class="line">OUTPUT1=$(sshpass -p <span class="string">&#x27;密码&#x27;</span> ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -tt 用户名@主机 <span class="string">&quot;ps -A; exit&quot;</span> 2&gt;&amp;1)</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;执行命令失败: <span class="variable">$OUTPUT1</span>&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">OUTPUT2=$(sshpass -p <span class="string">&#x27;密码&#x27;</span> ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -tt 用户名@主机 <span class="string">&quot;ps -A; exit&quot;</span> 2&gt;&amp;1)</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;执行命令失败: <span class="variable">$OUTPUT2</span>&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出命令的结果</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;输出1:\n<span class="variable">$OUTPUT1</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;输出2:\n<span class="variable">$OUTPUT2</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;任务执行完成&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送 Telegram 推送通知</span></span><br><span class="line">TOKEN=<span class="string">&quot;机器人token&quot;</span></span><br><span class="line">CHAT_ID=<span class="string">&quot;用户id&quot;</span></span><br><span class="line">MESSAGE=<span class="string">&quot;任务执行完成\n\n输出1:\n<span class="variable">$OUTPUT1</span>\n\n输出2:\n<span class="variable">$OUTPUT2</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 urlencode 对消息进行编码，以便在 URL 中安全传输</span></span><br><span class="line">MESSAGE_ENCODED=$(<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$MESSAGE</span>&quot;</span> | jq -sRr @uri)</span><br><span class="line"></span><br><span class="line">curl -s -X POST <span class="string">&quot;https://api.telegram.org/bot<span class="variable">$TOKEN</span>/sendMessage&quot;</span> \</span><br><span class="line">     -d <span class="string">&quot;chat_id=<span class="variable">$CHAT_ID</span>&amp;text=<span class="variable">$MESSAGE_ENCODED</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>记得把其中的密码、用户名、主机、机器人token、用户id修改为自己的。</p>
<h1 id="更新脚本"><a href="#更新脚本" class="headerlink" title="更新脚本"></a>更新脚本</h1><p>后面闲着没事又整了两个号，发现脚本添加账号不方便，而且没有报错的提示，有指令输入错误就会卡死’ps -A; exit’没用，所以又去和GPT聊了聊，更新下面几点:</p>
<ol>
<li>多账号添加更方便;</li>
<li>设置了ssh超时,避免了脚本卡死;</li>
<li>电报消息可以提示哪些账号出错。</li>
</ol>
<p>如有连接不上可以检查是否在 <a href="https://www.serv00.com/ip_unban/">https://www.serv00.com/ip_unban/</a> 解锁了IP(我调试脚本就把我IP禁过😂)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;开始执行任务...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个数组来存储输出和错误信息</span></span><br><span class="line"><span class="built_in">declare</span> -A OUTPUTS</span><br><span class="line"><span class="comment"># 用于标记是否有命令失败</span></span><br><span class="line">has_error=<span class="literal">false</span></span><br><span class="line"><span class="comment"># 用于存储成功的命令</span></span><br><span class="line">successful_commands=()</span><br><span class="line"><span class="comment"># 用于存储失败的命令</span></span><br><span class="line">failed_commands=()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 SSH 超时（单位：秒）</span></span><br><span class="line">SSH_TIMEOUT=15</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义账号、密码和主机信息数组，每个元素包含 &quot;账号:密码:主机&quot;，一行一组</span></span><br><span class="line">CREDENTIALS=(</span><br><span class="line"><span class="string">&quot;账号1:密码1:主机1&quot;</span></span><br><span class="line"><span class="string">&quot;账号2:密码2:主机2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环遍历每行并执行命令</span></span><br><span class="line"><span class="keyword">for</span> cred <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;CREDENTIALS[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    IFS=<span class="string">&#x27;:&#x27;</span> <span class="built_in">read</span> -r user pass host &lt;&lt;&lt; <span class="string">&quot;<span class="variable">$cred</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$user</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    </span><br><span class="line">    OUTPUTS[<span class="string">&quot;<span class="variable">$user</span>&quot;</span>]=$(sshpass -p <span class="string">&quot;<span class="variable">$pass</span>&quot;</span> ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=<span class="variable">$SSH_TIMEOUT</span> -t <span class="variable">$user</span>@<span class="variable">$host</span> <span class="string">&quot;ps -A&quot;</span> 2&gt;&amp;1)</span><br><span class="line">    <span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;执行命令失败: <span class="variable">$user</span>: <span class="variable">$&#123;OUTPUTS[&quot;$user&quot;]&#125;</span>&quot;</span></span><br><span class="line">        has_error=<span class="literal">true</span></span><br><span class="line">        failed_commands+=(<span class="string">&quot;<span class="variable">$user</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;执行命令成功: <span class="variable">$user</span>: <span class="variable">$&#123;OUTPUTS[&quot;$user&quot;]&#125;</span>&quot;</span></span><br><span class="line">        successful_commands+=(<span class="string">&quot;<span class="variable">$user</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建 Telegram 消息内容</span></span><br><span class="line">TOKEN=<span class="string">&quot;机器人token&quot;</span></span><br><span class="line">CHAT_ID=<span class="string">&quot;用户id&quot;</span></span><br><span class="line">MESSAGE=<span class="string">&quot;保号任务执行结果:\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加成功的命令到消息</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;#successful_commands[@]&#125;</span> -gt 0 ]; <span class="keyword">then</span></span><br><span class="line">    MESSAGE+=<span class="string">&quot;保号成功:\n&quot;</span></span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;successful_commands[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">        MESSAGE+=<span class="string">&quot;\n<span class="variable">$user</span>:\n<span class="variable">$&#123;OUTPUTS[$user]&#125;</span>\n&quot;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加失败的命令到消息</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;#failed_commands[@]&#125;</span> -gt 0 ]; <span class="keyword">then</span></span><br><span class="line">    MESSAGE+=<span class="string">&quot;\n以下账号出错了😭:\n&quot;</span></span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;failed_commands[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">        MESSAGE+=<span class="string">&quot;<span class="variable">$user</span>:\n<span class="variable">$&#123;OUTPUTS[$user]&#125;</span>\n&quot;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 urlencode 对消息进行编码，以便在 URL 中安全传输</span></span><br><span class="line">MESSAGE_ENCODED=$(<span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$MESSAGE</span>&quot;</span> | jq -sRr @uri)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送 Telegram 推送通知</span></span><br><span class="line">curl -s -X POST <span class="string">&quot;https://api.telegram.org/bot<span class="variable">$TOKEN</span>/sendMessage&quot;</span> \</span><br><span class="line">     -d <span class="string">&quot;chat_id=<span class="variable">$CHAT_ID</span>&amp;text=<span class="variable">$MESSAGE_ENCODED</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出最终结果</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$has_error</span>&quot;</span> = <span class="literal">true</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;请检查输入是否正确，或是否在 https://www.serv00.com/ip_unban/ 解锁了IP&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;任务执行完成,所有机器保号成功&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>附telegram的通知截图<br><img src="https://tcer.rr.nu/i/2024/08/05/66b044e5d99fb.png" width=50% height=50% /></p>
<h1 id="以上代码一些参数的作用"><a href="#以上代码一些参数的作用" class="headerlink" title="以上代码一些参数的作用"></a>以上代码一些参数的作用</h1><p><code>-o StrictHostKeyChecking=no</code><br>这是 SSH 的一个选项，表示在连接到新主机时不进行主机密钥检查。这可以避免在第一次连接时出现提示，适用于自动化脚本，但会降低安全性。</p>
<p><code>-o UserKnownHostsFile=/dev/null</code><br>这个选项指定 SSH 不使用已知主机文件（通常是 ~&#x2F;.ssh&#x2F;known_hosts），而是将其输出重定向到 &#x2F;dev&#x2F;null，即不保存任何主机密钥。这也是为了避免在自动化脚本中出现提示。</p>
<p><span style="color:red;">由上面两条可见此方法不是很安全，所以大家自行选择是否使用此方法。</span></p>
<p><code>-tt</code><br>这个选项强制分配一个伪终端（pseudo-terminal），这在某些情况下是必要的，尤其是当你需要在远程执行的命令中使用交互式功能时。</p>
<p><code>ps -A; exit</code><br><code>ps -A</code> 命令用于列出系统上所有正在运行的进程。<code>; exit</code> 可以确保在执行 ps -A 后，无论其成功与否，SSH 会话都会自动退出。如果想”ps-A”成功运行后再退出使用<code>&quot;ps -A &amp;&amp; exit&quot;</code></p>
<h1 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h1><p>青龙面板—定时任务—创建任务<br>名称随意<br>命令&#x2F;脚本填入你自定义的脚本名称，如：<br><code>task Serv00.sh</code><br>定时规则（cron表达式）<br>叫GPT帮着写吧，我也不会😂， 下面是每 7 天的 6:00 AM 执行一次。<br><code>0 6 */7 * *</code><br>点击确定就完成了。<br>（由于博客的图床还没想好用什么，所以就没放图了。）</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol>
<li><a href="https://gaojilingjuli.blogspot.com/2024/07/sshserv00.html">https://gaojilingjuli.blogspot.com/2024/07/sshserv00.html</a></li>
<li><a href="https://saika.us.kg/2024/01/27/serv00_logs#%E8%87%AA%E5%8A%A8%E7%BB%AD%E6%9C%9F">https://saika.us.kg/2024/01/27/serv00_logs#%E8%87%AA%E5%8A%A8%E7%BB%AD%E6%9C%9F</a></li>
<li><a href="https://linux.cn/article-8086-1.html">https://linux.cn/article-8086-1.html</a></li>
</ol>
]]></content>
      <tags>
        <tag>青龙面板</tag>
        <tag>Serv00</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 查询 NAT 类型</title>
    <url>/2024/07/17/Mac%E6%9F%A5%E8%AF%A2NAT%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>安装好Python和pip<br>使用 pip 安装 pystun3。这是一个用于获取 STUN 服务器信息的 Python 库。</p>
<span id="more"></span>
<p><code>python -m pip install pystun3</code></p>
<p>安装完成后，您可以通过以下命令验证 pystun3 是否安装成功：<br><code>pip3 show pystun3</code></p>
<p>现在，我们将使用 pystun3 获取 NAT 类型。首先，在终端中启动 Python 解释器：<br><code>python3</code></p>
<p>然后，输入以下 Python 代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> stun</span><br><span class="line">stun.get_ip_info()</span><br></pre></td></tr></table></figure>

<p>附NAT类型介绍：</p>
<ul>
<li>NAT1（Full Cone NAT 全锥形NAT）： 这是最开放的NAT类型。任何外部主机只要知道内部主机的IP地址和端口号，就可以通过相同的外部IP和端口访问内部主机。</li>
<li>NAT2（Restricted Cone NAT 受限锥型NAT）： 在这种类型下，只有内部主机与外部主机进行通信后，外部主机才能通过相同的外部IP和端口访问内部主机。</li>
<li>NAT3（Port-Restricted Cone NAT 端口受限锥型NAT）： 这种类型要求外部主机必须知道内部主机的特定端口号才能进行通信。只允许内部主机发起的连接，外部主机只能响应这些连接。</li>
<li>NAT4（Symmetric NAT 对称型NAT）： 这是最严格的NAT类型。每个外部主机的通信都使用不同的映射端口，只有目标主机才能进行回应。这意味着相同的内部IP和端口对不同的外部地址和端口会有不同的映射，这种类型的NAT最难与外部主机建立连接。</li>
</ul>
<p>本文搬运自：<br><a href="https://blog.zhheo.com/p/76f914a8.html">https://blog.zhheo.com/p/76f914a8.html</a><br><a href="https://www.kulafan.com/2023/07/31/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%AD%E6%B5%8B%E8%AF%95nat%E7%B1%BB%E5%9E%8B/">https://www.kulafan.com/2023/07/31/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%AD%E6%B5%8B%E8%AF%95nat%E7%B1%BB%E5%9E%8B/</a></p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Systemctl运行Rustdesk服务端</title>
    <url>/2024/04/30/%E4%BD%BF%E7%94%A8Systemctl%E8%BF%90%E8%A1%8CRustdesk%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="下载服务端"><a href="#下载服务端" class="headerlink" title="下载服务端"></a>下载服务端</h1><p>首先在<br><a href="https://github.com/rustdesk/rustdesk-server/releases%60">https://github.com/rustdesk/rustdesk-server/releases`</a><span id="more"></span><br>下载最新版的 rustdesk-server-linux-amd64.zip<br>再FTP上传到自己的服务器地址,或者直接使用wget也可以</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 使用wget下载1.1.11-1版本</span></span><br><span class="line">wget https://github.com/rustdesk/rustdesk-server/releases/download/1.1.11-1/rustdesk-server-linux-amd64.zip</span><br><span class="line"><span class="comment">## unzip解压</span></span><br><span class="line">unzip rustdesk-server-linux-amd64.zip</span><br><span class="line"><span class="comment">## 重命名解压后的文件（可选）</span></span><br><span class="line"><span class="built_in">mv</span> amd64 rustdesk</span><br></pre></td></tr></table></figure>

<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p><strong>我把程序文件放在 “&#x2F;rustdesk”下了,注意根据自己的位置修改</strong></p>
<p>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;路径下创建自启动service文件<br><code>cd /etc/systemd/system/</code></p>
<p>在文件中添加以下内容（注意修改脚本文件所在路径），编辑完后保存退出</p>
<p>运行的两个文件是干嘛的?</p>
<ul>
<li>hbbs: RustDesk的ID服务，用于分配和注册ID；</li>
<li>hbbr: RustDesk的中继服务，如果直连远程不行，会使用hbbr进行流量中继。</li>
</ul>
<p><strong>hbbs.service</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=hbbs</span><br><span class="line">After=network.target syslog.target  <span class="comment">##在网络和系统日志服务可用后，服务才会启动</span></span><br><span class="line">Wants = network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">Restart=on-failure      <span class="comment">##程序崩溃会自动重启,之前用着就会失效,所以加了这个</span></span><br><span class="line">RestartSec=5s</span><br><span class="line">WorkingDirectory=/rustdesk      <span class="comment">##这里修改成你的位置</span></span><br><span class="line">ExecStart=/rustdesk/hbbs -k _     <span class="comment">##-k _ 是强制加密,新版好像改了参数</span></span><br><span class="line">ExecStop=/bin/kill -TERM <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>


<p><strong>hbbr.service</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=hbbr</span><br><span class="line">After=network.target syslog.target</span><br><span class="line">Wants = network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5s</span><br><span class="line">WorkingDirectory=/rustdesk</span><br><span class="line">ExecStart=/rustdesk/hbbr -k _</span><br><span class="line">ExecStop=/bin/kill -TERM <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>使用systemctl命令重载配置<br><code>systemctl daemon-reload</code></p>
<p>运行程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start hbbr.service</span><br><span class="line">systemctl start hbbs.service</span><br></pre></td></tr></table></figure>

<p>设置开机自动运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> hbbs.service</span><br><span class="line">systemctl <span class="built_in">enable</span> hbbr.service</span><br></pre></td></tr></table></figure>

<p>检验程序是否启动，如果看到进程中有hbbs和hbbr进程则代表启动成功<br><code>ps -ef | grep hbb</code></p>
<img src="https://tcer.rr.nu/i/2024/08/07/66b3211c1815b.png" width=80% height=80% />

<p>也可用systemctl status查看运行状态<br><code>systemctl status hbbs</code></p>
<img src="https://tcer.rr.nu/i/2024/08/07/66b31fc133801.png" width=80% height=80% />

<p><strong>Systemctl其他命令</strong><br>查看当前系统中所有的服务列表，并找到需要关闭的服务：<br><code>systemctl list-unit-files --type=service</code><br>停止需要关闭的服务：<br><code>systemctl stop [service_name].service</code><br>禁止服务开机自启：<br><code>systemctl disable [service_name].service</code></p>
<h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><p>在RustDesk设置的网络中,ID和中继服务器都填上服务器的IP,如果开启了加密,key的值在服务端运行后,程序文件夹(&#x2F;rustdesk)下面会有 <strong>.pub</strong> 文件,key就是 <strong>.pub</strong> 文件里面的值</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.mintimate.cn/2023/08/27/guideToHostRustDesk/">https://www.mintimate.cn/2023/08/27/guideToHostRustDesk/</a><br><a href="https://blog.csdn.net/ZRongZH/article/details/131210221">https://blog.csdn.net/ZRongZH/article/details/131210221</a></p>
]]></content>
      <tags>
        <tag>Systemctl</tag>
        <tag>Rustdesk</tag>
      </tags>
  </entry>
</search>
